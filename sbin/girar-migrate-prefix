#!/bin/sh -efu

# SC2250 (style): Prefer putting braces around variable references even when not strictly required.
# SC2209 (warning): Use var=$(command) to assign output (or quote to assign string).
# SC2248 (style): Prefer double quoting even when variables don't contain special characters.
# shellcheck enable=all disable=SC2250,SC2209,SC2248

if [ --test = "$1" ]; then
	USERMOD="echo usermod"
	USERADD="echo useradd"
	LN="echo ln"
	inplace=
	shift
else
	USERMOD=usermod
	USERADD=useradd
	LN=ln
	inplace=-i
fi

service="$1"; shift

[ "$service" = gitery ] || [ "$service" = girar ]
aliases=/etc/"$service"/aliases
[ -s "$aliases" ]

old_prefix="$1"; shift
new_prefix="$1"; shift

# SC3040 (warning): In POSIX sh, set option pipefail is undefined.
# shellcheck disable=SC3040
set -o pipefail

tmpdir=
cleanup_tmpdir()
{
	[ -z "$tmpdir" ] || rm -rf -- "$tmpdir"
	exit "$@"
}

tmpdir=$(mktemp -dt "${0##*/}.XXXXXXXX")
trap 'cleanup_tmpdir $?' EXIT
trap 'exit 143' HUP INT QUIT PIPE TERM

getent passwd | grep "^$old_prefix" | cut -d: -f1 > "$tmpdir"/users

cd /etc/openssh/authorized_keys

while read -r U; do {
	ent="$(getent passwd "$U")"
	IFS=":" read -r _dummy _dummy uid gid gecos home shell <<EOF
$ent
EOF
	groups="$(id -nG "$U" | tr ' ' ',')"
	NU="$new_prefix${U#"$old_prefix"}"
	if id "$NU" >/dev/null 2>&1; then
		continue
	fi
	$USERMOD -l "$NU" "$U"
	$USERADD --non-unique -u "$uid" -g "$gid" -c "$gecos" -d "$home" -g "$gid" -G "$groups" -M -s "$shell" "$U"
	[ ! -s "$U" ] ||
		$LN "$U" "$NU"
} </dev/null; done < "$tmpdir"/users

sed -E "s/^$old_prefix(.*)/$new_prefix\1\n$old_prefix\1/" $inplace "$aliases"
