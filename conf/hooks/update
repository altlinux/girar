#!/bin/sh
#
# An example hook script to mail out commit update information.
# It also blocks tags that aren't annotated.
# Called by git-receive-pack with arguments: refname sha1-old sha1-new
#
# To enable this hook:
# (1) make this file executable by "chmod +x update".
# (2) define the recipient e-mail address in $GIT_DIR/mailto file.
# (3) define the project description in $GIT_DIR/description file.
# (4) optionally define email charset in $GIT_DIR/charset file.
#

LANG=C
LANGUAGE=C
LC_ALL=C
export LANG LANGUAGE LC_ALL

fatal()
{
	printf %s\\n "git-update: $*" >&2
	exit 1
}

if [ "$1" = "refs/heads/origin" ]; then
	fatal "$1 is not designed for publication and therefore is not allowed in this repo"
fi

# check ref name
case "$1" in
refs/heads/*)
	ref_style=head
	ref_name="${1#refs/heads/}"
	;;
refs/tags/*)
	ref_style=tag
	ref_name="${1#refs/tags/}"
	;;
refs/releases/*)
	ref_style=release
	ref_name="${1#refs/releases/}"
	;;
refs/remotes/*)
	ref_style=remote
	ref_name="${1#refs/remotes/}"
	;;
*)
	fatal "Unrecognized ref name: $1"
	;;
esac

ref_type="$(git-cat-file -t "$3")" || exit 1

# Only allow annotated tags and releases in a shared repo
case "$1,$ref_type" in
refs/tags/*,tag|refs/releases/*,tag)
	echo "### Pushing $ref_style \`$ref_name' to the masses" >&2
	;;
refs/tags/*,*|refs/releases/*,*)
	echo >&2 "*** Un-annotated ${ref_style}s are not allowed in this repo"
	echo >&2 "*** Use \`git-tag [ -a | -s ]' for tags you want to propagate."
	exit 1
	;;
esac

diff_max=65536
date_format="%F %T %z"
git_dir="$(readlink -ev "$GIT_DIR")" || exit 1
giter_home="$(readlink -ev "$GITER_HOME")" || exit 1
git_dir="$GITER_HOME${git_dir#$giter_home}"
project_name="${git_dir##*/}"
project_name="${project_name%.git}"
project_type="${git_dir%/*}"
project_type="${project_type##*/}"
project="$project_type/$project_name"
charset="$(head -n1 $GIT_DIR/charset 2>/dev/null)"

check_etc_packages()
{
	[ "$project" = "etc/packages" -a "$1" = "refs/heads/master" ] ||
		return
}

check_packages_releases()
{
	[ "$project_type" = "packages" -a "$ref_style" = "release" ] ||
		return
}

# quote argument for sed regexp.
quote_sed_regexp()
{
	local out="$*"
	if [ -z "${out##*[\[\].^\$\\/]*}" ]; then
		out="$(printf %s "$out" |sed -e 's/[].^$[\/]/\\&/g')" ||
			return
	fi
	printf %s "$out"
}

translate_email()
{
	local a="$1" && shift
	local a="$(quote_sed_regexp "$a")"
	sed -ne "s/^${GITER_USER_PREFIX}$a:[[:space:]]\\+\\([^[:space:]]\\+\\).*/\\1/p" \
		</etc/postfix/git.aliases
}

find_subscribers()
{
	if [ "$project_type" != packages ]; then
		cat "$GIT_DIR/mailto" 2>/dev/null
		return
	fi

	local s='[[:space:]]'
	local u="$(quote_sed_regexp "$GITER_USER")"
	local p="$(quote_sed_regexp "$project_name")"
	local t="$(quote_sed_regexp "$ref_style")"
	local n="$(quote_sed_regexp "$ref_name")"
	local dir=/etc/giter-email/packages
	local a

	a="$(grep -ls "^\\(\\*\\|$u\\)$s\\+\\(\\*\\|$p\\)$s\\+\\(\\*\\|$t\\)$s\\+\\(\\*\\|$n\\)$s*\$" \
		"$dir"/*/subscription |
		sed -ne "s|^$dir/\\([^/]\\+\\)/subscription\$|\\1|p")"
	set -- ${a}
	for a; do translate_email "$a"; done

	a="$(cat "$dir/$u/distribution" 2>/dev/null |
		sed -ne "s/^\\(\\*\\|$p\\)$s\\+\\(\\*\\|$t\\)$s\\+\\(\\*\\|$n\\)$s\\+\\([^[:space:]]\\+\\)\$/\\4/p" |
		tr , ' ')"
	set -- ${a}
	for a; do translate_email "$a"; done
}

mailto="$(
	find_subscribers |
	sed -e 's/^[[:space:]]\+//' -e 's/[[:space:]]\+$//' |
	sort -u |
	tr -s '\n' , |
	sed -e 's/^,\+//' -e 's/,\+$//' -e 's/,/, /g'
)"
[ -n "$mailto" ] ||
	check_etc_packages "$@" ||
	check_packages_releases "$@" ||
	exit 0

exit_handler()
{
	local rc=$?
	trap - EXIT
	rm -rf -- "$workdir"
	exit $rc
}
workdir="$(mktemp -dt git-update.XXXXXXXX)" || exit 1
trap exit_handler HUP PIPE INT QUIT TERM EXIT

validate_distribution_subscription()
{
	local where="$1" && shift
	local p="$1" && shift
	local t="$1" && shift
	local n="$1" && shift
	local rest="$1" && shift

	if [ -n "$rest" ]; then
		fatal "$where: unexpected field: $rest"
	fi
	[ "$p" = '*' ] ||
		printf %s "$p" |egrep -qs '^[A-Za-z0-9][-A-Za-z0-9_.]+$' ||
		fatal "$where: invalid package pattern: $p"
	case "$t" in
		\*|head|tag|release|remote) ;;
		*) fatal "$where: invalid reftype pattern: $t" ;;
	esac
	[ "$n" = '*' ] ||
		git-check-ref-format "refs/$n" ||
		fatal "$where: invalid refname pattern: $n"
}

validate_email_list()
{
	local where="$1" && shift
	local addr="$1" && shift
	local a="$(printf %s "$addr" |tr , ' ')"
	set -- ${a}
	for a; do
		[ -n "$(translate_email "$a")" ] ||
			fatal "$where: invalid email list: user $a not found."
	done
}

handle_etc_packages()
{
	check_etc_packages "$@" || return 0

	local u p t n a line rest
	for n in distribution subscription; do
		if git-diff-tree --name-only "$2" "$3" -- email-"$n" |
		   fgrep -qs email-"$n"; then
			git-cat-file blob "$3:email-$n" 2>/dev/null |
				egrep '^[[:space:]]*[^#]' >"$workdir/$n"
		fi
	done

	if [ -f "$workdir/distribution" ]; then
		line=0
		while read -r p t n a rest; do
			line="$((1+$line))"
			[ -n "$a" ] ||
				fatal "email-distribution:$line: insufficient fields."
			validate_distribution_subscription \
				"email-distribution:$line" \
				"$p" "$t" "$n" "$rest"
			validate_email_list "email-distribution:$line" "$a"
		done <"$workdir/distribution"
	fi

	if [ -f "$workdir/subscription" ]; then
		line=0
		while read -r u p t n rest; do
			line="$((1+$line))"
			[ -n "$n" ] ||
				fatal "email-subscription:$line: insufficient fields."
			validate_distribution_subscription \
				"email-subscription:$line" \
				"$p" "$t" "$n" "$rest"
			[ "$u" = '*' ] ||
				{
					printf %s "$u" |egrep -qs '^[a-z][a-z_0-9]+$' &&
					[ -d "$GITER_HOME/$u" ]
				} ||
				fatal "$where: invalid user pattern: $u"
		done <"$workdir/subscription"
	fi

	for n in distribution subscription; do
		if [ -f "$workdir/$n" ]; then
			cp "$workdir/$n" "/etc/giter-email/packages/$GITER_USER/"
		fi
	done
}

handle_packages_releases()
{
	check_packages_releases "$@" || return 0

	echo >&2 "package releases are not handled yet..."
}

MSG="$workdir/message"
DIFF="$workdir/diff"
FROM_ADDR="${GITER_USER}@altlinux.org ($(getent passwd "$USER" |cut -d: -f5))"

cat >"$MSG" <<EOF
To: $mailto
From: $FROM_ADDR
Reply-To: $FROM_ADDR
Subject: [git update] $project: ${1#refs/}
Content-Type: text/plain${charset:+; charset=$charset}
X-git-dir: $git_dir
X-git-description: $project

Update of $git_dir

EOF

new_head()
{
	[ -n "$mailto" ] || return 0

	echo "New $ref_style \`$ref_name' available with the following commits:"
	git-rev-list --pretty "$3" $(git-rev-parse --not --all)
}

new_tag()
{
	handle_packages_releases "$@"
	[ -n "$mailto" ] || return 0

	# a pushed and annotated tag (usually) means a new version
	if [ "$ref_type" = tag ]; then
		local tag="$workdir/tag"
		git-cat-file tag "$3" >"$tag"
		local tagger ts date
		tagger="$(sed -ne '4s/^tagger \([^>]\+>\).*/\1/p' <"$tag")"
		ts="$(sed -ne '4s/^tagger [^>]\+>[^0-9]*\([0-9]\+\).*/\1/p' <"$tag")"
		date="$(date --date="1970-01-01 00:00:00 $ts seconds" +"$date_format")"
		echo "Tag \`$ref_name' created by $tagger at $date"
		echo "with the following message:"
		git-cat-file tag "$3" |sed -n '5,$p'
		echo =======
		echo
	fi

	local prev size
	prev="$(git-describe "$3^" 2>/dev/null| sed 's/-g.*//')"
	# the first tag in a repo will yield no $prev
	if [ -z "$prev" ]; then
		echo "Changes since the dawn of time:"
		git-rev-list --pretty "$3"
	else
		echo "Changes since \`$prev':"
		git-diff -M "$3" "^$prev" >"$DIFF"
		git-diff -M --stat "$3" "^$prev"
		echo
		git-rev-list --pretty "$3" "^$prev"
		echo
		size="`wc -c $DIFF | sed 's/^[^0-9]*\([0-9]*\).*$/\1/'`"
		if [ $size -ge $diff_max ]; then
			echo "Full changes since \`$prev' are too large ($size bytes)"
		else
			echo "Full changes since \`$prev' follow:"
			cat "$DIFF"
		fi
	fi
}

update_ref()
{
	handle_etc_packages "$@"
	handle_packages_releases "$@"
	[ -n "$mailto" ] || return 0

	local base prev size
	base="$(git-merge-base "$2" "$3")"
	prev="$(git-describe "$base" 2>/dev/null)" || prev="$base"
	if [ -z "$prev" ]; then
		echo "Changes since the dawn of time:"
		git-rev-list --pretty "$3"
	else
		case "$base" in
		"$2")
			echo "Changes since \`$prev':"
			;;
		*)
			echo "Changes since common ancestor \`$prev':"
			;;
		esac
		git-diff -M "$3" "^$base" >"$DIFF"
		git-diff -M --stat "$3" "^$base"
		echo
		git-rev-list --pretty "$3" "^$base"
		echo
		size="`wc -c $DIFF | sed 's/^[^0-9]*\([0-9]*\).*$/\1/'`"
		if [ $size -ge $diff_max ]; then
			echo "Full changes since \`$prev' are too large ($size bytes)"
		else
			echo "Full changes since \`$prev' follow:"
			cat "$DIFF"
		fi
	fi
}

if expr "$2" : '0*$' >/dev/null; then
	# new ref
	case "$1" in
	refs/heads/*|refs/remotes/*)
		new_head "$@"
		;;
	refs/releases/*|refs/tags/*)
		new_tag "$@"
		;;
	esac
else
	update_ref "$@"
fi >>"$MSG"

[ -z "$mailto" ] ||
	/usr/sbin/sendmail -i -t <"$MSG"
exit 0
