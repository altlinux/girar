#!/bin/sh -efu

. gb-sh-functions
. gb-sh-conf

set_GIT_DIR()
{
	local sym="$(printf %s "$N" |cut -c1)"
	GIT_DIR="$GB_GEARS_DIR/$sym/$N.git"
	export GIT_DIR
}

girar_commit()
{
	local N="$1" i="$2"; shift 2
	local GIT_DIR
	set_GIT_DIR

	if [ -s gears/$i/copy_repo ]; then
		# copy from another branch
		local copy_repo
		copy_repo="$(cat "gears/$i/copy_repo")"
		if git rev-parse --verify "heads/$copy_repo" >/dev/null 2>&1; then
			git branch -f "$GB_REPO_NAME" "heads/$copy_repo"
		fi
		return
	fi

	local tag_name
	tag_name="$(cat "gears/$i/tag_name")"
	if git rev-parse --verify "heads/$GB_REPO_NAME" >/dev/null 2>&1; then
		# update gear
		git fetch -q -n gears/$i/git tag "$tag_name"
		git branch -f "$GB_REPO_NAME" "tags/$tag_name"
	else
		# first time push
		git init -q --template=/var/empty
		git fetch -q -n gears/$i/git tag "$tag_name"
		git branch "$GB_REPO_NAME" "tags/$tag_name"
		touch -- "$GIT_DIR/git-daemon-export-ok"
	fi
}

girar_obsolete()
{
	local N="$1"; shift
	local GIT_DIR
	set_GIT_DIR
	[ -d "$GIT_DIR" ] || return 0
	if git rev-parse --verify "heads/$GB_REPO_NAME" >/dev/null 2>&1; then
		git branch -f "old/$GB_REPO_NAME" "$GB_REPO_NAME"
		git branch -D "$GB_REPO_NAME"
	fi
}

while read -r N EVR F; do
	i=$(srpm2i "$F")
	girar_commit "$N" "$i"
done <plan/add-src

. gb-sh-tmpdir

sort -k1,1 <plan/add-src >"$tmpdir"/add-src
sort -k1,1 <plan/rm-src >"$tmpdir"/rm-src
join -v2 "$tmpdir"/add-src "$tmpdir"/rm-src >"$tmpdir"/rm

while read -r N EVR F; do
	girar_obsolete "$N"
	stamp_echo >&2 "gear for old project \"$N\" obsoleted"
done <"$tmpdir"/rm

gb-make-gears-index

stamp_echo >&2 'gears update OK'
