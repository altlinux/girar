#!/bin/sh -efu

. gb-sh-tmpdir

i=$1
cd build/$i

rc=0

(set +f && cd i586/rpms   && ls *.noarch.rpm 2>/dev/null) >"$tmpdir/i586.noarch"
(set +f && cd x86_64/rpms && ls *.noarch.rpm 2>/dev/null) >"$tmpdir/x86_64.noarch"
if ! (cd "$tmpdir" && diff -U1 {i586,x86_64}.noarch ); then
	echo >&2 "error (#$i): different set of noarch packages"
	rc=1
fi

dump_deps()
{
	R='[Requires: %{REQUIRENAME} %{REQUIREFLAGS:depflags} %{REQUIREVERSION}\n]'
	P='[Provides: %{PROVIDENAME} %{PROVIDEFLAGS:depflags} %{PROVIDEVERSION}\n]'
	O='[Obsoletes: %{OBSOLETENAME} %{OBSOLETEFLAGS:depflags} %{OBSOLETEVERSION}\n]'
	C='[Conflicts: %{CONFLICTNAME} %{CONFLICTFLAGS:depflags} %{CONFLICTVERSION}\n]'
	rpmquery --qf "$R$P$O$C" -p "$1"
}

dump_noarch()
{
	CMDCACHE_DISABLE=1 rpmfile "$1"
	dump_deps "$1"
}

while read -r rpm; do
	dump_noarch i586/rpms/"$rpm" >$tmpdir/$rpm.i586
	dump_noarch x86_64/rpms/"$rpm" >$tmpdir/$rpm.x86_64
	if ! (cd "$tmpdir" && diff -U1 $rpm.{i586,x86_64} ); then
		echo >&2 "error (#$i): non-identical noarch packages"
		rc=1
	fi
done <$tmpdir/i586.noarch

find_arch()
{
	(set +f && cd "$1" && ls *.rpm) |
	while read -r rpm; do
		case $rpm in
			*.src.rpm | *.noarch.rpm) continue ;;
		esac
		N=$(rpmquery --qf '%{NAME}' -p $1/"$rpm")
		printf '%s\t%s\n' "$N" "$rpm"
	done |
	sort -u
}

find_arch i586/rpms   >"$tmpdir"/i586.arch
find_arch x86_64/rpms >"$tmpdir"/x86_64.arch

join         "$tmpdir"/{i586,x86_64}.arch >$tmpdir/both.arch
join -v1 -v2 "$tmpdir"/{i586,x86_64}.arch >$tmpdir/only.arch

dump_share()
{
	CMDCACHE_DISABLE=1 rpmfile "$1" |
		LC_ALL=C grep '^/usr/share/' || [ $? -eq 0 ]
}

while read -r N f1 f2; do
	dump_share i586/rpms/$f1   >$tmpdir/$f1.usr-share
	dump_share x86_64/rpms/$f2 >$tmpdir/$f2.usr-share
	if ! (cd "$tmpdir" && diff -U1 {$f1,$f2}.usr-share ); then
		echo >&2 "error (#$i): non-identical /usr/share part"
		rc=1
	fi
done <$tmpdir/both.arch

exit $rc
