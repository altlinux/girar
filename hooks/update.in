#!/bin/sh

. girar-sh-functions

PROG=girar-update

arg_refname="$1"
arg_oldrev="$2"
arg_newrev="$3"

# Safety checks
[ -n "$GIT_DIR" ] || fatal 'Environment variable GIT_DIR is not set'
if [ -z "$arg_refname" -o -z "$arg_oldrev" -o -z "$arg_newrev" ]; then
	echo >&2 "Usage: $PROG <ref> <oldrev> <newrev>"
	exit 1
fi

# check ref name
case "$arg_refname" in
refs/heads/*)
	ref_style=head
	ref_name="${1#refs/heads/}"
	;;
refs/tags/*)
	ref_style=tag
	ref_name="${1#refs/tags/}"
	;;
refs/remotes/*)
	ref_style=remote
	ref_name="${1#refs/remotes/}"
	;;
*)
	fatal "Unrecognized ref name: $arg_refname"
	;;
esac

enable -f /usr/lib/bash/lockf lockf || exit 1
builtin lockf -v "$GIT_DIR" || exit 1

if [ "$arg_newrev" = '0000000000000000000000000000000000000000' ]; then
	ref_type=delete
else
	ref_type="$(git cat-file -t "$arg_newrev")" || exit 1
fi

case "$arg_refname,$ref_type" in
refs/tags/*,tag)
	# annotated tag
	;;
refs/tags/*,delete)
	# delete tag
	;;
refs/tags/*,commit)
	echo >&2 "*** Un-annotated ${ref_style}s are not allowed in this repository"
	echo >&2 "*** Use \`git tag [ -a | -s ]' for tags you want to propagate."
	exit 1
	;;

refs/heads/origin,commit)
	fatal "$arg_refname is not designed for publication and therefore is not allowed in this repository"
	# branch
	;;
refs/heads/*,commit)
	# branch
	;;
refs/heads/*,delete)
	# delete branch
	;;

refs/remotes/*,commit)
	# tracking branch
	;;
refs/remotes/*,delete)
	# delete tracking branch
	;;
*)
	fatal "Unsupported type of update to ref \`$arg_refname' of type \`$ref_type'"
	;;
esac

git_dir="$(readlink -ev "$GIT_DIR")" || exit 1
girar_home="$(readlink -ev "$GIRAR_HOME")" || exit 1
git_dir="$GIRAR_HOME${git_dir#$girar_home}"
project_name="${git_dir##*/}"
project_name="${project_name%.git}"
project_type="${git_dir%/*}"
project_type="${project_type##*/}"
project="$project_type/$project_name"

. girar-update-etc-functions
. girar-update-email-functions

# Optimize
[ -n "$mailto" ] ||
	check_etc "$@" ||
	exit 0

workdir=
cleanup()
{
	trap - EXIT
	[ -z "$workdir" ] || rm -rf -- "$workdir"
	exit "$@"
}

exit_handler()
{
	cleanup $?
}

signal_handler()
{
	cleanup 143
}

trap exit_handler EXIT
trap signal_handler HUP PIPE INT QUIT TERM
workdir="$(mktemp -dt "$PROG.XXXXXXXX")" || exit 1

handle_etc "$@"

[ -z "$mailto" ] ||
	generate_email |send_email

exit 0
