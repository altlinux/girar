#!/bin/sh -efu

arepo_arch="$1"; shift
[ -s arepo/$arepo_arch/todo.list ] || exit 0
native_arch="${arepo_arch##*-}"
arch="${arepo_arch%%-*}"

. gb-sh-functions

(umask 002; mkdir -p arepo/$arepo_arch/rpms) || false

. shell-quote
qvv() { quote_shell "$1=\"$(quote_shell "$2")\""; }

# prepare remote node for arepo build
# note that now we use $remote_host:gb-repo, not $GB_REPO_DIR
gb-x-rsync-loop -a "$GB_HOME/remote/" "$remote_host:"
remote_home=$(ssh "$remote_host" pwd)
gb-x-ssh "$remote_host" ./gb-remote-plant \
	"\"$(quote_shell "$(cat task/owner)")\"" \
	"\"$(quote_shell "$GB_REPO_NAME")\"" \
	"\"$(quote_shell "$remote_home/gb-repo")\"" \
	"\"$(quote_shell "$arch")\"" \
	"\"$(qvv rpmargs "$GB_REPO_RPMARGS")\"" \
	cache_dir=cache.arepo

# copy the temporary repo generated by gb-task-gen-testrepo
gb-x-rsync-loop -a \
	--exclude '*list.*.bz2' \
	--exclude 'srclist.*' \
	--exclude 'contents_index' \
	"$GB_TMP_REPO_DIR"/{$arch,$native_arch,noarch} "$remote_host:gb-repo/"

# copy input lists
gb-x-rsync-loop -q -- arepo/$arepo_arch/{pkg,todo}.list "$remote_host:tmp/"

# run the build on remote side
gb-x-ssh "$remote_host" ./gb-remote-arepo-build \
	"\"$(quote_shell "$arch")\"" || {
		stamp_echo >&2 "[$arepo_arch] arepo remote build FAILED";
		rsync -q -- "$remote_host:build/arepo.log" arepo/$arepo_arch/;
		exit 1;
	}

# copy build results from remote side
gb-x-rsync-loop -qrlt -- "$remote_host:build/" arepo/$arepo_arch/

# purge temporary repo
gb-x-rsync-loop -a --delete /var/empty/ "$remote_host:gb-repo/"

if ! out=$(find "arepo/$arepo_arch/rpms/" -mindepth 1 -maxdepth 1 -type f -name '*.rpm' -execdir gb-x-rpmaddsign '{}' '+'); then
	printf '%s\n' "$out"
	stamp_echo >&2 "[$arepo_arch] arepo rpmsign FAILED"
	exit 1
fi

cat plan/arepo-add-$arepo_arch > arepo/$arepo_arch/done.list

stamp_echo >&2 "[$arepo_arch] arepo build OK"
