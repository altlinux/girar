#!/bin/sh -efu

. gb-sh-functions

rc=0

fail()
{
	stamp_echo >&2 "error: $*"
	rc=1
}

check_inheritance()
{
	local new_id="$1"; shift
	local old_id="$1"; shift

	[ -z "$(GIT_ALTERNATE_OBJECT_DIRECTORIES="${1-}" git log -n1 --pretty=format:1 ^"$new_id" "$old_id")" ]
}

girar_check_git()
{
	local new_tag_id tag_name old_tag_id
	new_tag_id="$(cat "gears/$i/tag_id")"
	tag_name="$(cat "gears/$i/tag_name")"
	if old_tag_id=$(git rev-parse --verify "tags/$tag_name" 2>/dev/null); then
		[ "$old_tag_id" = "$new_tag_id" ] ||
			{ fail "$GIT_DIR already contains different tag \`$tag_name'"; return; }
	fi

	local dir new_commit_id
	dir="$(cat "gears/$i/dir")"
	new_commit_id="$(git --git-dir="gears/$i/git" rev-parse --verify "tags/$tag_name^{commit}")"
	[ "$old_commit_id" != "$new_commit_id" ] ||
		{ fail "${dir##*/} tag \`$tag_name' refers to the same commit as $GIT_DIR branch \`$GB_REPO_NAME'"; return; }
	check_inheritance "$new_commit_id" "$old_commit_id" "gears/$i/git/objects" ||
		fail "${dir##*/} tag \`$tag_name' is not inherited from $GIT_DIR branch \`$GB_REPO_NAME'"
}

girar_check_srpm()
{
	fail "$GIT_DIR branch \`$GB_REPO_NAME' already exists, package update by srpm upload is not possible"
}

girar_check_copy()
{
	local copy_repo copy_commit_id
	copy_repo="$(cat gears/$i/copy_repo)"
	if ! copy_commit_id="$(git rev-parse --verify "heads/$copy_repo^{commit}" 2>/dev/null)"; then
		fail "$GIT_DIR already contains \`$GB_REPO_NAME' branch, but does not contain \`$copy_repo' branch"
		return
	fi
	check_inheritance "$copy_commit_id" "$old_commit_id" ||
		fail "$GIT_DIR branch \`$copy_repo' is not inherited from branch \`$GB_REPO_NAME'"
}

girar_check()
{
	local N="$1" i="$2"; shift 2
	local GIT_DIR old_commit_id

	set_GIT_DIR "$GB_GEARS_DIR" "$N"

	if ! old_commit_id="$(git rev-parse --verify "heads/$GB_REPO_NAME^{commit}" 2>/dev/null)"; then
		# first time push to this branch
		return 0
	fi

	# update of existing commit, check inheritance

	if [ -s "gears/$i/dir" ]; then
		# build from gear
		girar_check_git
	elif [ -s "gears/$i/srpm" ]; then
		# build from srpm
		girar_check_srpm
	elif [ -s "gears/$i/copy_repo" ]; then
		# copy from another branch
		girar_check_copy
	else
		fail "#$i: source not found"
	fi
}

while read -r N EVR F; do
	i=$(srpm2i "$F")
	girar_check "$N" "$i"
done <plan/add-src

[ "$rc" = 0 ] && text=OK || text=FAILED
stamp_echo >&2 "gears inheritance check $text"
exit $rc
