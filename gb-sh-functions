#!/bin/sh

. gb-sh-conf

oneliner()
{
	printf %s "$*" |tr -s '[:space:]' ' '
}

stamp_echo()
{
	echo "$(LC_TIME=C date '+%Y-%b-%d %T') :: $(oneliner "$*")"
}

userid_nums()
{
	find gears -mindepth 2 -maxdepth 2 -path 'gears/[1-9]*/userid' -type f 2>/dev/null |
		cut -d/ -f2 |sort -n
}

gear_nums()
{
	find gears -mindepth 2 -maxdepth 2 -path 'gears/[1-9]*/dir' -type f 2>/dev/null |
		cut -d/ -f2 |sort -n
}

src_nums()
{
	find gears -mindepth 2 -maxdepth 2 \( -path 'gears/[1-9]*/dir' -or -path 'gears/[1-9]*/srpm' \) -type f 2>/dev/null |
		cut -d/ -f2 |sort -n
}

package_nums()
{
	find gears -mindepth 2 -maxdepth 2 -path 'gears/[1-9]*/package' -type f 2>/dev/null |
		cut -d/ -f2 |sort -n
}

copy_nums()
{
	find gears -mindepth 2 -maxdepth 2 -path 'gears/[1-9]*/copy_repo' -type f 2>/dev/null |
		cut -d/ -f2 |sort -n
}

build_nums()
{
	find build -mindepth 3 -maxdepth 3 \( -path 'build/[1-9]*/*/srpm' -or -path 'build/[1-9]*/*/rpms' \) -type d 2>/dev/null |
		cut -d/ -f2 |sort -nu
}

srpm2i()
{
	local f="$1"; shift
	local i
	i="$(find build -mindepth 4 -maxdepth 4 -path "build/[1-9]*/*/srpm/$f" -type f |
		cut -d/ -f2 |sort -nu)"
	if [ ! -d "build/$i" ]; then
		echo >&2 " *** cannot find $f in build/[1-9]*/*/srpm/"
		return 1
	fi
	echo "$i"
}

findrpm()
{
	local dir="$1"; shift
	local f="$1"; shift
	local p
	p="$(find build -mindepth 4 -maxdepth 4 -path "build/[1-9]*/*/$dir/$f" -type f |
		sort -u |head -n1)"
	if [ ! -f "$p" ]; then
		echo >&2 " *** cannot find $f in build/[1-9]*/*/$dir/"
		return 1
	fi
	echo "$p"
}

findbin()
{
	findrpm rpms "$1"
}

findsrc()
{
	findrpm srpm "$1"
}

_N="%{name}"
_VR="%{version}-%{release}"
_EVR="%|epoch?{%{epoch}:}|$_VR"
_NVR="%{name}-$_VR"
_A="%{arch}"

qsrc()
{
	local d
	for d; do
		# src-N  src-EVR  src-F
		find "$d" -name '*.src.rpm' -execdir \
			rpmquery --qf "$_N\t$_EVR\t$_NVR.src.rpm\n" -p -- '{}' '+'
	done
}

qbin()
{
	local d
	for d; do
		# bin-N  bin-EVR  bin-A  bin-F  src-F
		find "$d" -name '*.rpm' -not -name '*.src.rpm' -execdir \
			rpmquery --qf "$_N\t$_EVR\t$_A\t$_NVR.$_A.rpm\t%{sourcerpm}\n" -p -- '{}' '+'
	done
}

# Now what's the plan?  I guess we don't just move some files around.
# We deal with "tuples" (src,bin+).  Therefore, the consistent plan is
# to group files into such tuples, and decide how new tuples replace
# the existing tuples.
#
# Thus we have to assume that the repo is consistent: both src->bin+
# and bin->src mappings must exist for every package in the repo.  Stale
# packages cannot be handled by the plan consistently, and removing them
# is someone else's job.
#
# Tuples are represented with the following table:
#
# src-N  src-EVR  src-F  bin-N  bin-EVR  bin-A  bin-F
# -----  -------  -----  -----  -------  -----  -----
#
# Note: the fact that both mappings mentioned above exist roughly means
# that we can join src+bin on %{SOURCERPM}.  This is how we do the table.

mktable()
{
	local x="$1"; shift
	# sort by src-F field
	sort -k3 -o "$x.src"{,}
	sort -k5 -o "$x.bin"{,}
	# join by src-F field
	join -t$'\t' -13 -25 -o '1.1 1.2 1.3 2.1 2.2 2.3 2.4' -- "$x".{src,bin} >"$x"
	sort -u -o "$x"{,}
}

make_repo_table()
{
	local repo="${1-}"
	[ -n "$repo" ] || repo="$GB_REPO_NAME"

	local out="${2:-$repo}"

	if [ -s "$out" ]; then
		return 0
	fi

	local repo_dir
	if [ "$repo" = "$GB_REPO_NAME" ]; then
		repo_dir="$GB_REPO_DIR"
	else
		repo_dir="$(unset GB_REPO_DIR &&
			    . gb-sh-conf-$repo &&
			    printf %s "$GB_REPO_DIR")"
	fi

	if [ -s "$repo_dir/files/list/src.list" ]; then
		sort -u "$repo_dir/files/list/src.list" >"$out.src"
	else
		qsrc "$repo_dir"/{i586,x86_64,noarch}/SRPMS.classic/ >"$out.src"
		sort -u -o "$out.src"{,}
	fi

	if [ -s "$repo_dir/files/list/bin.list" ]; then
		sort -u "$repo_dir/files/list/bin.list" >"$out.bin"
	else
		qbin "$repo_dir"/{i586,x86_64,noarch}/RPMS.classic/ >"$out.bin"
		sort -u -o "$out.bin"{,}
	fi

	mktable "$out"
}

set_GIT_DIR()
{
	local prefix="$1"; shift
	local project="$1"; shift
	local sym="$(printf %s "$project" |cut -c1)"
	GIT_DIR="$prefix/$sym/$project.git"
	export GIT_DIR
}

# When replacing packages, versions must increase.
vercheck()
{
	local EVR1="${1:?}" EVR2="${2:?}"
	[ "$(rpmevrcmp "$EVR1" "$EVR2")" -lt 0 ] || return 1
}

halt_build_queue()
{
	echo "${0##*/} failed in $PWD" >>"$GB_STOP_FILE"
	stamp_echo >&2 '*** BUILD QUEUE HALTED ***'
	return 1
}

is_check_failure_tolerated()
{
	local n
	for n in ${GB_LIST_OF_CHECKS_ALLOWED_TO_FAIL-}; do
		[ "${0##*/}" = "$n" ] || continue
		return 0
	done
	return 1
}

list_notifiable_pkg_acl_members()
{
	local n="$1"; shift
	local PATH="$PATH"
	[ -z "${PATH##/usr/libexec/girar:*}" -o \
	  -z "${PATH%%*:/usr/libexec/girar}" ] ||
	        PATH="$PATH:/usr/libexec/girar"

	girar-acl-show "$GB_REPO_NAME" "$n" |
		cut -f2- |
		tr ' ' '\n' |
		egrep -vx '@(nobody|everybody|qa)' |
		cat
}
