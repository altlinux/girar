#!/bin/sh -efu

trap - HUP INT QUIT PIPE TERM

. gb-sh-functions
. gb-sh-conf

id="$1"; shift

cd "$GB_TASKS_DIR/$id"
enable -f /usr/lib/bash/lockf lockf
# obtain an exclusive lock on the TASKS structure
builtin lockf -v .

seq=$(cat task/seq)
[ -n "$seq" ] && [ "$(($seq%3))" -eq 1 ] ||
	{ echo >&2 "Task $id is not selected for run"; exit 1; }

show_task()
{
	for i in $(set +f; cd gears 2>/dev/null && ls [1-9]*/userid 2>/dev/null |cut -d/ -f1 |sort -n); do
		printf '#%d ' "$i"
		if [ -s "gears/$i/dir" ]; then
			printf 'build %s from %s' "$(cat "gears/$i/tag_name")" "$(cat "gears/$i/dir")"
		elif [ -s "gears/$i/srpm" ]; then
			printf 'build %s' "$(cat "gears/$i/srpm")"
		elif [ -s "gears/$i/package" ]; then
			if [ -s "gears/$i/copy_repo" ]; then
				printf 'copy %s from %s' "$(cat "gears/$i/package")" "$(cat "gears/$i/copy_repo")"
			else
				printf 'delete %s' "$(cat "gears/$i/package")"
			fi
		else
			echo unrecognized
			exit 1
		fi
		echo
	done
}

(
	exec >>task/log 2>&1
	[ -s task/log ] && text=resumed || text=started
	stamp_echo "task #$id $text:"
	show_task
	set -x
	gb-task-pkgtar
	# Obtain an exclusive lock on the $GB_REPO_DIR.
	# Actually, only shared lock is required for build and checks,
	# but an exclusive lock is required later for commit.
	builtin lockf -v "$GB_REPO_DIR"
	gb-task-build
	gb-task-copy-packages
	gb-task-check-build
	gb-task-repo-plan
	gb-task-repo-vercheck
	gb-task-repo-unmets
	gb-task-check-acl
	# Obtain an exclusive lock on the $GB_GEARS_DIR.
	# Actually, only shared lock is required for check,
	# but an exclusive lock is required later for commit.
	builtin lockf -v "$GB_GEARS_DIR"
	gb-task-check-girar
	gb-task-commit-repo
	gb-task-commit-girar
	gb-task-commit-acl
	gb-task-repo-sync
)

rc=$?
echo "$rc" >task/rc
[ "$rc" = 0 ] && text=COMPLETE || text=FAILED
stamp_echo >>task/log "task #$id $text"

seq=$(cat task/seq)
seq=$(($seq+1))
echo "$seq" >task/seq

mutt -x -c "$GB_REPO_EMAIL" -s "[girar-builder] repo=$(cat task/repo) task=$id try=$((1+$seq/3)) $text" -a task/log "git_$(cat task/owner)" </dev/null

exit $rc
