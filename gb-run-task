#!/bin/sh -efu

. gb-sh-functions

id="$1"; shift

cd "$GB_TASKS_DIR/$id"
enable -f /usr/lib/bash/lockf lockf
# obtain an exclusive lock on the TASKS structure
builtin lockf -v .

seq=$(cat task/seq)
[ -n "$seq" ] && [ "$(($seq%3))" -eq 1 ] ||
	{ echo >&2 "Task $id is not selected for run"; exit 1; }
try="$((1+$seq/3))"
[ $try -gt 1 ] || try=
log="task/log${try:+.$try}"
gb-task-set-summary

# test only mode
test_only=
if [ -f task/test-only ]; then
	test_only=-s
fi

> task/acl-addressees
> task/unmet-addressees

(
	exec >>"$log" 2>&1
	[ -s task/log ] && text=resumed || text=started
	started_by="$(stat -c %U "$log")"
	started_by="${started_by#git_}"
	stamp_echo "task #$id for $GB_REPO_NAME $text by $started_by:"
	gb-task-show
	env PATH="$PATH:/usr/libexec/girar" girar-make-task-index-html "$id" ||:

	# Prepare changes
	gb-task-pkgtar
	# Obtain an exclusive lock on the $GB_REPO_DIR.
	# Actually, only shared lock is required for build and checks,
	# but an exclusive lock is required later for commit.
	if ! builtin lockf -nv $test_only "$GB_REPO_DIR"; then
		builtin lockf -v $test_only "$GB_REPO_DIR"
		stamp_echo "acquired a lock on $GB_REPO_NAME repository"
	fi
	gb-task-gen-buildrepo
	gb-task-setup-remote
	gb-task-copy-packages
	gb-task-build
	env PATH="$PATH:/usr/libexec/girar" girar-make-task-index-html "$id" ||:

	# Test changes
	gb-task-check-build
	gb-task-check-noarch
	gb-task-repo-plan
	gb-task-repo-vercheck
	gb-task-gen-testrepo
	gb-task-repo-unmets
	gb-task-repo-elfsym
	gb-task-check-install
	gb-task-local-policy
	# Obtain an exclusive lock on the $GB_GEARS_DIR.
	# Actually, only shared lock is required for check,
	# but an exclusive lock is required later for commit.
	builtin lockf -v $test_only "$GB_GEARS_DIR"
	gb-task-check-girar
	gb-task-check-lastchange
	gb-task-check-acl
	gb-task-cleanup

	[ -z "$test_only" ] ||
		exit 0

	# Apply changes
	gb-task-close-bugs
	gb-task-commit-repo
	gb-task-commit-girar
	gb-task-commit-acl
	gb-task-repo-sync
)

rc=$?
echo "$rc" >task/rc
if [ "$rc" = 0 ]; then
	[ -z "$test_only" ] &&
		text=COMPLETE ||
		text=TESTED
else
	text=FAILED
fi
stamp_echo >>"$log" "task #$id for $GB_REPO_NAME $text"

seq=$(cat task/seq)
seq=$(($seq+1))
echo "$seq" >task/seq

gb-task-send-email "$id"
env PATH="$PATH:/usr/libexec/girar" girar-make-task-index-html "$id" ||:
gb-task-archive "$id"

# hook up a general archive cleanup
gb-archive-stale-tasks ||:

exit $rc
