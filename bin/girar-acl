#!/bin/sh -efu

. girar-sh-functions
. shell-quote
. shell-args

[ -n "${GIRAR_USER-}" ] ||
	fatal 'GIRAR_USER undefined'

# Abort if no non-empty repository list available.
[ -s "$GIRAR_REPO_LIST" ] ||
	fatal 'Sorry, list of available repositories is not available'

case "${1-}" in
	--help)
	        cat <<EOF
Usage: $PROG --list
   or: $PROG <repository> [{<package>|@<group>} {check|show}]
   or: $PROG <repository> [{<package>|@<group>} {add|del|leader|replace} {<login>|@<group>}...]
   or: $PROG <repository> <package> nmu show
   or: $PROG <repository> <package> nmu {add|del} [<login> [<start date> [<end date>]]]
   or: $PROG <repository>
Valid repositories are: $(tr -s '\n' ' '<"$GIRAR_REPO_LIST")
If no package is given, read commands from stdin, one command per line.
See http://www.altlinux.org/Incoming/acl for details.
EOF
		exit 0
		;;
	--list)
		cat -- "$GIRAR_REPO_LIST"
		exit 0
		;;
esac

workdir=
cleanup()
{
	trap - EXIT
	[ -z "$workdir" ] || rm -rf -- "$workdir"
	exit "$@"
}

exit_handler()
{
	cleanup $?
}

signal_handler()
{
	cleanup 143
}

nqueued=0
add_acl_cmd()
{
	printf "$@" | girar-acl-apply-changes "$repository" "$workdir"
	printf >&3 "$@"
	nqueued="$(($nqueued+1))"
}

show_nmu()
{
	[ "$#" -eq 0 ] ||
		usage 'Too many arguments.'
	local qitem
	quote_sed_regexp_variable qitem "$item"
	sed -n "/^$qitem[[:space:]]/p" "$workdir/list.nmu.$repository"
}

show_acl()
{
	[ "$#" -eq 0 ] ||
		usage 'Too many arguments.'
	girar-acl-show "$repository" "$item" "$workdir"
}

rc=
parse_cmd()
{
	[ "$#" -ge 2 ] ||
		show_usage 'Not enough arguments.'

	local item="$1"; shift
	local action="$1"; shift

	rc=
	case "$action" in
		show)
			show_acl "$@"
			return ;;
		nmu)
			[ "$#" -ge 1 ] ||
				show_usage 'Not enough arguments.'
			if [ "$1" = show ]; then
				shift
				show_nmu "$@"
				return
			fi ;;
		check)
			girar-check-perms "$item" "$repository" || rc=1
			return ;;
	esac

	add_acl_cmd '%s\t%s\t%s\n' "$item" "$action" "$*"
}

[ "$#" -ge 1 ] ||
	show_usage 'Not enough arguments.'

repository="$1"
shift

repository="$(girar-normalize-repo-name "$repository")"

# Abort if acl spool dir for the repository is not available.
cd "$GIRAR_ACL_STATE_DIR/$repository"

trap exit_handler EXIT
trap signal_handler HUP PIPE INT QUIT TERM
workdir="$(mktemp -dt "$PROG.XXXXXXXX")"

# Copy all current acl files to workdir.
flock -s "$GIRAR_ACL_CONF_DIR" \
find "$GIRAR_ACL_CONF_DIR" -type f -name 'list.*' \
        -exec cp -at "$workdir" -- \{\} \+

# If caller specified arguments, parse them,
# otherwise parse stdin line by line.
exec 3>"$workdir/cmd"
if [ $# -eq 0 ]; then
	message 'Go ahead and type your commands' >&2
	while read -r line; do
		parse_cmd $line
	done
else
	parse_cmd "$@"
fi
[ -s "$workdir/cmd" ] || exit 0

enable -f /usr/lib/bash/lockf lockf
builtin lockf -v "$GIRAR_ACL_STATE_DIR"

> "$workdir/new"
[ ! -s "$GIRAR_USER.acl" ] ||
	cat -- "$GIRAR_USER.acl" >"$workdir/new"
cat -- "$workdir/cmd" >>"$workdir/new"
mv -f -- "$workdir/new" "$GIRAR_USER.acl"

[ "$nqueued" = 0 -o -n "${GB_REPO_NAME-}" ] ||
	message "$nqueued command(s) queued"

exit $rc
