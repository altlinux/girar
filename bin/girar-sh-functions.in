#!/bin/sh

if [ -z "${__included_girar_sh_functions-}" ]; then
__included_girar_sh_functions=1

[ -z "${PATH##@CMD_DIR@:*}" -o -z "${PATH%%*:@CMD_DIR@}" ] ||
	PATH="@CMD_DIR@:$PATH"

. shell-error
. girar-sh-config

normalize_gitdir()
{
	local name0 name
	name0="$1"; shift

	name="${name0%%/}"
	[ -n "$name" ] ||
		fatal "$name0: invalid directory name"
	name="${name%.git}.git"
	if [ "${name%/*}" = "$name" ]; then
		printf 'packages/%s' "$name"
	else
		printf '%s' "$name" | tr -s /
	fi
}

validate_project_dir()
{
	local dir0 ndir
	dir0="$1"; shift

	ndir="$(normalize_gitdir "$dir0")"
	case "${ndir%/*}" in
		packages|private|public) ;;
		*) fatal "$dir0: invalid directory name" ;;
	esac
	printf %s "${ndir##*/}" |grep -Exqse "$PROJECT_NAME_REGEXP\.git" ||
		fatal "$dir0: invalid directory name"
	printf %s "$ndir"
}

gear_nums()
{
	find gears -mindepth 2 -maxdepth 2 -path 'gears/[1-7]*/userid' -type f 2>/dev/null |
		cut -d/ -f2 |sort -n
}

check_task_modifiable()
{
	local state
	state=$(cat task/state)
	case "$state" in
		AWAITING|EPERM|FAILED|NEW|PENDING|POSTPONED|TESTED)
			;;
		BUILDING|COMMITTING)
			fatal "task #$id is a work in progress" ;;
		DONE)
			fatal "task #$id is already successfully processed" ;;
		*)
			fatal "task #$id is in unrecognized state \"$state\"" ;;
	esac
}

fi #__included_girar_sh_functions
