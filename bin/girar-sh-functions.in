#!/bin/sh

if [ -z "${__included_girar_sh_functions-}" ]; then
__included_girar_sh_functions=1

[ -z "${PATH##@CMD_DIR@:*}" -o -z "${PATH%%*:@CMD_DIR@}" ] ||
	PATH="@CMD_DIR@:$PATH"

. shell-error
. girar-sh-config

normalize_gitdir()
{
	local name0 name
	name0="$1"; shift

	[ -n "${name0##/}" -a "$name0" = "${name0%/}" ] ||
		fatal "$name0: invalid git repository directory name"
	name="${name0%.git}.git"
	if [ "${name%/*}" = "$name" ]; then
		printf 'packages/%s' "$name"
	else
		printf '%s' "$name" | tr -s /
	fi
}

validate_user_gitdir()
{
	local dir0 ndir
	dir0="$1"; shift

	ndir="$(normalize_gitdir "$dir0")"
	ndir="${ndir#$PEOPLE_DIR/$GIRAR_USER/}"
	case "${ndir%/*}" in
		packages|private|public) ;;
		*) fatal "$dir0: invalid git repository directory name" ;;
	esac
	printf %s "${ndir##*/}" |grep -Exqse "$PROJECT_NAME_REGEXP\.git" ||
		fatal "$dir0: invalid git repository directory name"
	printf %s "$ndir"
}

validate_user_exported_gitdir()
{
	local dir0 ndir
	dir0="$1"; shift

	ndir="$(validate_user_gitdir "$dir0")"
	[ -f "$ndir/git-daemon-export-ok" ] ||
		fatal "$dir0: git repository not available"
	printf %s "$ndir"
}

validate_local_exported_gitdir()
{
	local dir0 ndir
	dir0="$1"; shift

	ndir="$(normalize_gitdir "$dir0")"
	if [ "${ndir#/}" = "$ndir" ]; then
		ndir="$PEOPLE_DIR/$GIRAR_USER/$ndir"
	fi
	[ -f "$ndir/git-daemon-export-ok" ] ||
		fatal "$dir0: git repository not available"
	printf %s "$ndir"
}

gear_nums()
{
	find gears -mindepth 2 -maxdepth 2 -path 'gears/[1-7]*/userid' -type f 2>/dev/null |
		cut -d/ -f2 |sort -n
}

check_task_modifiable()
{
	local state
	state=$(cat task/state)
	case "$state" in
		AWAITING|EPERM|FAILED|NEW|PENDING|POSTPONED|SWEPT|TESTED)
			;;
		BUILDING|COMMITTING|FAILING)
			fatal "task #$id is a work in progress" ;;
		DONE)
			fatal "task #$id is already successfully processed" ;;
		*)
			fatal "task #$id is in unrecognized state \"$state\"" ;;
	esac
}

valid_repositories()
{
	repositories="$(ls -- "$CONF_DIR/repo/")"
	printf %s "$repositories" | tr '\n' ' '
}

list_indexed_repositories()
{
	local repositories="$(ls -- "$TASKS_DIR/index/")"
	printf %s "$repositories" | tr '\n' ' '
}

post_api()
{
	if [ -n "${WEBAPI_URL}" ]; then
		curl --retry 5 --retry-delay 1 -sS -X POST -d @- "$WEBAPI_URL/api/v1$1" > /dev/null 2>&1 ||:
	else
		cat > /dev/null ||:
	fi
}

girar_amqp_publish() {
	if [ -n "$AMQP_SERVER" ]; then
		amqp-publish \
			--server="$AMQP_SERVER" \
			--port="$AMQP_PORT" \
			--username="$AMQP_USERNAME" \
			--vhost="$AMQP_VHOST" \
			--exchange="$AMQP_EXCHANGE" \
			${AMQP_CACERT:+--ssl} \
			--cacert="$AMQP_CACERT" \
			--content-type="application/json" \
			--persistent \
			"$@"
	else
		cat >/dev/null
	fi
}

fi #__included_girar_sh_functions
