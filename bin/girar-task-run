#!/bin/sh -efu

. girar-sh-functions
PROG='girar-task run'

usage()
{
	[ -z "$*" ] || message "$*"
	echo >&2 "usage: $PROG [--test-only] [<task_id>]"
	exit 1
}

if [ "${1-}" = '--help' ]; then
	usage
fi

test_only=
if [ "${1-}" = '--test-only' ]; then
	test_only=1
	shift
fi

if [ "$#" -gt 1 ]; then
	usage 'Too many arguments.'
fi

cd "$GB_TASKS"

id="$(PROG="$PROG" girar-task-find-current "$@")"
cd "$id"

enable -f /usr/lib/bash/lockf lockf
# obtain an exclusive lock on the TASKS structure
builtin lockf -n . ||
        fatal "task #$id is locked"

repo="$(cat task/repo)"
owner="$(cat task/owner)"
[ "$owner" = "$GIRAR_USER" ] ||
	girar-check-superuser "$repo" ||
		fatal "task #$id belongs to $owner"

[ -n "$(find acl -mindepth 1 -maxdepth 1 -path 'acl/[1-7]*' -type d 2>/dev/null)" ] ||
	fatal "cannot run empty task #$id"

state=$(cat task/state)
case "$state" in
	NEW|TESTED|EPERM|FAILED)
		;;
	AWAITING)
		fatal "task #$id is already scheduled for run" ;;
	BUILDING|PENDING|COMMITTING)
		fatal "task #$id is a work in progress" ;;
	DONE)
		fatal "task #$id is already successfully processed" ;;
	*)
		fatal "task #$id is in unrecognized state \"$state\"" ;;
esac

try=$(cat task/try 2>/dev/null ||:)
if [ -n "$try" ]; then
	try=$(($try+1))
else
	try=1
fi
iter=1

# create group writable directories for build results
mkdir -pm3775 bugmail install
mkdir -pm2775 build plan

# create group writable files required for build
(umask 002; touch task/log.$try.$iter task/iter task/try task/summary) || false

# set/remove test-only flag
if [ -n "$test_only" ]; then
	[ -f task/test-only ] ||
		touch task/test-only
else
	[ ! -f task/test-only ] ||
		rm task/test-only
fi

logger -t "$PROG" "user=$GIRAR_USER task=$id try=$try repo=$repo"

trap '' HUP INT QUIT PIPE TERM
echo $try > task/try
echo 1 > task/iter
next_state=AWAITING
if [ "$state" = TESTED -a -z "$test_only" ]; then
	next_state=PENDING
fi
girar-task-change-state "$id" "$next_state"

echo >&2 "task #$id: try #$try queued, result will be emailed to $owner@$EMAIL_DOMAIN"
