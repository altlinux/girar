#!/bin/sh -efu

. girar-sh-functions
. shell-args

PROG0="$PROG"
PROG='task run'

show_help()
{
	cat <<EOF
$PROG - queue a task for build

Usage: $PROG [options] [<task id>]

If no task id is specified, the latest task created by the current user
will be choosen.

Options:
  --dry-run     stop right before queueing the task;
  --test-only   stop after test, do not commit the task;
  --swift       enable swift mode (undocumented, RTFS);
  --help        show this text and exit.
EOF
	exit
}

dry_run=
test_only=
swift_only=
while :; do
	case "${1-}" in
		--dry-run) dry_run=1 ;;
		--test-only) test_only=1; swift_only= ;;
		--swift) test_only=1; swift_only=1 ;;
		--help) show_help ;;
		*) break;
	esac
	shift
done

if [ "$#" -gt 1 ]; then
	show_usage 'too many arguments.'
fi

cd "$TASKS_DIR"

id="$(PROG="$PROG" girar-task-find-current "$@")"
cd "$id"

enable -f /usr/lib/bash/lockf lockf
# obtain an exclusive lock on the TASKS structure
builtin lockf -n . ||
        fatal "task #$id is locked"

repo="$(cat task/repo)"
owner="$(cat task/owner)"
state="$(cat task/state)"

case "$state" in
	NEW|SWEPT|TESTED|EPERM|FAILED)
		;;
	AWAITING|POSTPONED)
		fatal "task #$id is already scheduled for run" ;;
	BUILDING|FAILING|PENDING|COMMITTING)
		fatal "task #$id is a work in progress" ;;
	DONE)
		fatal "task #$id is already successfully processed" ;;
	*)
		fatal "task #$id is in unrecognized state \"$state\"" ;;
esac

[ -n "$(find acl -mindepth 1 -maxdepth 1 -path 'acl/[1-7]*' -type d 2>/dev/null)" ] ||
	fatal "cannot run empty task #$id"

check_acl_i_src()
{
	local i="$1" src="$2"; shift 2
	local u a

	# check author permissions
	u="$(cat gears/$i/userid)"
	env GIRAR_USER="$u" girar-check-perms "$src" "$repo" && return ||:

	# check confirmer permissions
	for a in $(cd acl/$i 2>/dev/null && shopt -s nullglob && set +f && echo [a-z]*); do
		env GIRAR_USER="$a" girar-check-perms "$src" "$repo" && return ||:
	done

	# author is not permitted and nobody approved
	message "$src: Operation not permitted"
	return 1
}

check_acl()
{
	[ "$state" = EPERM -a -s plan/check_acl ] || return
	local i src rc=0
	while read -r i src; do
		check_acl_i_src "$i" "$src" || rc=$?
	done < plan/check_acl
	return $rc
}

[ "$owner" = "$GIRAR_USER" ] ||
	girar-check-superuser "$repo" ||
		check_acl ||
			fatal "task #$id belongs to $owner"

nums=$(gear_nums)
check_copy_del()
{
	local i package action a_repo rc=0
	for i in $nums; do
		[ -s gears/$i/package -a ! -s gears/$i/dir ] || continue
		package="$(cat gears/$i/package)"
		if [ -s gears/$i/copy_repo ]; then
			action=copy
			a_repo="$(cat gears/$i/copy_repo)"
		else
			action=delete
			a_repo=$repo
		fi
		girar-check-package-in-repo "$package" "$a_repo" ||
		{
			message "task #$id: subtask #$i: invalid request to $action nonexistent package \`$package' from \`$a_repo'"
			rc=1
		}
	done
	return $rc
}

check_srpm()
{
	local i nevr rc=0
	for i in $nums; do
		[ -s gears/$i/srpm -a -s gears/$i/nevr ] || continue
		nevr="$(cat gears/$i/nevr)"
		GIRAR_ALLOW_SAME_NEVR=
		if [ -f gears/$i/rebuild ]; then
			GIRAR_ALLOW_SAME_NEVR=1
		fi
		GIRAR_ALLOW_SAME_NEVR=$GIRAR_ALLOW_SAME_NEVR \
			girar-check-nevr-in-repo "${nevr%	*}" "${nevr#*	}" "$repo" ||
		{
			message "task #$id: subtask #$i: package \`$(cat gears/$i/srpm)' is too old for \`$repo'"
			rc=1
		}
	done
	return $rc
}

check_depends()
{
	[ -s task/depends ] || return 0
	local i k rc=0
	set -- $(cat task/depends)
	for i; do
		k="_$(($i/1024))"
		if [ -d "$TASKS_DIR/archive/done/$k/$i/task" ]; then
			sed -i "/^$i\$/d" task/depends
		elif [ ! -d "$TASKS_DIR/$i/task" ]; then
			message "required task #$i not found"
			rc=1
		fi
	done
	return $rc
}

fail=
check_copy_del || fail=1
check_srpm || fail=1
check_depends || fail=1
[ -z "$fail" ]

try=$(cat task/try 2>/dev/null ||:)
if [ -n "$try" ]; then
	try=$(($try+1))
else
	try=1
fi
iter=1

next_state=AWAITING
if [ "$state" = TESTED -a -z "$test_only" ]; then
	next_state=PENDING
fi
if [ "$next_state" = AWAITING -a -s task/depends ]; then
	next_state=POSTPONED
fi
if [ -n "$dry_run" ]; then
	echo >&2 "task #$id: try #$try could be placed to $next_state queue"
	exit 0
fi

# create group writable directories for build results
mkdir -pm3775 install logs mail mail/bugmail mail/cvemail report
mkdir -pm2775 arepo build plan

# create group writable files required for build
(umask 002; touch logs/events.$try.$iter.log task/iter task/try) || false

# set/remove test-only flag
if [ -n "$test_only" ]; then
	[ -f task/test-only ] ||
		touch task/test-only
else
	[ ! -f task/test-only ] ||
		rm task/test-only
fi

# set/remove swift flag
if [ -n "$swift_only" ]; then
	[ -f task/swift ] ||
		touch task/swift
else
	[ ! -f task/swift ] ||
		rm task/swift
fi

# remove "abort" flag
rm -f task/abort

echo "$GIRAR_USER" > task/run

logger -t "$PROG0" "user=$GIRAR_USER task=$id try=$try repo=$repo"

trap '' HUP INT QUIT PIPE TERM
echo $try > task/try
echo 1 > task/iter
girar-task-change-state "$id" "$next_state"
girar-webapi-task update "$id"

echo >&2 "task #$id: try #$try is $next_state, result will be emailed to $owner@$EMAIL_DOMAIN"
