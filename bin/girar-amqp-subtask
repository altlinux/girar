#!/bin/sh -efu

. girar-sh-functions
. girar-sh-amqp-functions
. girar-sh-json-functions
PROG='girar-amqp-subtask'

action="$1"; shift
id="$1"; shift
subid="$1"; shift

delete() {
	print_json string status deleted
}

create() {
	subtask_type='unknown'

	[ -s 'dir' ] && subtask_type='repo'
	[ -s 'srpm' ] && subtask_type='srpm'

	if [ -s 'package' ]; then
            if [ -s 'copy_repo' ]; then
		subtask_type='copy'
            elif [ -s 'rebuild_from' ]; then
		subtask_type='rebuild'
            else
		subtask_type='delete'
            fi
	fi

	print_json string status active
	print_json_file string 'userid' userid
	print_json string type "$subtask_type"

	print_json_file string 'sid' sid

	#srpm specific
	[ -s 'srpm' ] && print_json_file string 'srpm' srpm
	[ -s 'nevr' ] && print_json_file string 'nevr' nevr

	#repo specific
	[ -s 'dir' ] && print_json_file string 'dir' dir
	[ -s 'tag_name' ] && print_json_file string 'tag_name' tagname
	[ -s 'tag_id' ] && print_json_file string 'tag_id' tagid
	[ -s 'tag_author' ] && print_json_file string 'tag_author' tagauthor
	[ -s 'type' ] && print_json_file string 'type' spectype

	#used by copy, rebuild and del
	[ -s 'package' ] && print_json_file string 'package' package

	#copy specific
	[ -s 'copy_repo' ] && print_json_file string 'copy_repo' copyrepo

	#rebuild specific
	[ -s 'rebuild_from' ] && print_json_file string 'rebuild_from' rebuildfrom

	return 0
}

approve() {
	case "$approve_action" in
		added)
			local message_path=../../acl/"${action}d/$subid/${GIRAR_USER:-$(whoami)}"
			print_json bool revoked false
			print_json_file base64 "$message_path" base64_message
			print_json string approve_date "$(stat -c %.Y "$message_path")"
		;;
		revoked)
			print_json bool revoked true
		;;
	esac
}

progress() {
	print_json string stage "$stage"
	print_json string stage_status "$stage_status"
	print_json string arch "$arch"
	if [ "$arch" = all ]; then
		print_json string status ''
	else
		local status_file="$TASKS_DIR/$id/build/$subid/$arch/status"
		if [ -f "$status_file" ]; then
			print_json_file string "$status_file" status failed
		else
			print_json string status new
		fi
	fi
}

cd "$TASKS_DIR/$id/gears/$subid"

handler="$action"
routing_key="task.subtask.$action"
case "$action" in
	create|delete)
		;;
	approve|disapprove)
		handler=approve
		approve_action="$1"; shift
		;;
	progress)
		stage="$1"; shift
		stage_status="$1"; shift
		arch="${1:-all}"
		;;
	*)
		fatal "unknown action: '$action'"
		;;
esac

{
	printf '{'
	print_json string _routing_key "$routing_key"
	print_json string _timestamp "$(date '+%s.%N')"
	print_json string girar_user "${GIRAR_USER:-$(whoami)}"
	print_json_file string '../../task/repo' repo
	print_json_file string '../../task/owner' owner
	print_json number taskid "$id"
	print_json string task_changed "$(stat -c %.Y ../../task/state)"
	print_json_file string '../../task/state' state DELETED
	print_json number subtaskid "$subid"
	print_json string subtask_changed "$(stat -c %.Y .)"
	$handler
	printf '}'
} | girar_amqp_publish -r "$routing_key"
