#!/bin/sh -efu

. girar-sh-functions
. shell-args

PROG0="$PROG"
PROG='task deps'

show_help()
{
	cat <<EOF
$PROG - manage task dependencies

Usage: $PROG [<task_id>] <action> ...

Actions:
  show  show the list of task dependencies;
  clear clear the list of task dependencies;
  <edit action> <required task id1> [<required task id2>...]
        change the list of task dependencies.

Edit actions:
  add   add specified task ids to the list of task dependencies;
  del   remove specified task ids to the list of task dependencies;
  set   set the list of task dependencies to the specified task ids.
EOF
	exit
}

if [ "${1-}" = '--help' ]; then
	show_help
fi

[ $# -ge 1 ] || show_usage 'not enough arguments.'
case "$1" in
	show|clear|add|del|set) id=$(PROG="$PROG" girar-task-find-current) ;;
	*) id=$(PROG="$PROG" girar-task-find-current "$@"); shift;;
esac
cd "$TASKS_DIR/$id"

[ $# -ge 1 ] || show_usage 'not enough arguments.'
action="$1"; shift
case "$action" in
	show)	[ $# -eq 0 ] || show_usage 'too many arguments.'
		cat task/depends 2>/dev/null ||:
		exit 0
		;;
	clear)	[ $# -eq 0 ] || show_usage 'too many arguments.' ;;
	add|set)[ $# -ge 1 ] || show_usage 'not enough arguments.' ;;
	del)	[ $# -ge 1 ] || show_usage 'not enough arguments.'
		[ -s task/depends ] || exit 0
		;;
	*)	show_usage "invalid action: $action" ;;
esac

for i; do
	[ "$id" != "$i" ] ||
		fatal "$i: reflexive dependencies are not supported"
	[ -n "$i" -a -z "$(printf %s "$i" |tr -d '[:digit:]')" ] ||
		fatal "invalid task id: $i"
	case "$action" in
		del) ;;
		*) [ -d "$TASKS_DIR/$i/task" ] ||
			fatal "task #$i not found" ;;
	esac
done

# obtain an exclusive lock on the TASKS structure
exec <.
flock -n 0 ||
	fatal "task #$id is locked"

repo="$(cat task/repo)"
repo="$(girar-normalize-repo-name "$repo")"
owner="$(cat task/owner)"
state="$(cat task/state)"

check_task_modifiable

[ "$owner" = "$GIRAR_USER" ] ||
	girar-check-superuser "$repo" ||
		fatal "task #$id belongs to $owner"

umask 002
>> task/depends

{
	# obtain an exclusive lock on task/depends
	flock 0

	case "$action" in
		clear|set) > task/depends ;;
	esac

	for i; do
		k="_$(($i/1024))"
		if [ -d "$TASKS_DIR/archive/done/$k/$i/task" ]; then
			girar-task-rmdep "$i"
			continue
		fi
		case "$action" in
			del) girar-task-rmdep "$i" ;;
			*) echo "$i" >> task/depends ;;
		esac
	done

	sort -u -o task/depends task/depends
	logger -t "$PROG0" \
		"user=$GIRAR_USER task=$id depends=$(tr -s '[:space:]' , < task/depends | sed 's/,$//')"
} < task/depends

girar-task-change-state "$id" NEW
