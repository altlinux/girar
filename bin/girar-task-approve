#!/bin/sh -efu

. girar-sh-functions
. shell-args

case "$0" in
	*-approve)
		infinitive=approve
		noun=approval
		;;
	*-disapprove)
		infinitive=disapprove
		noun=disapproval
		;;
	*)
		fatal 'who am I?'
		;;
esac
PROG="task $infinitive"
past="${infinitive}d"
my_acl_dir="acl/$past"
approve_dir=acl/approved
disapprove_dir=acl/disapproved

show_help()
{
	cat <<EOF
$PROG - $infinitive a subtask of a task

Usage: $PROG [--revoke] <task id> <subtask number>
EOF
	exit
}

TEMP="$(getopt -n "$PROG" -o h -l revoke,help -- "$@")" ||
        show_usage
eval set -- "$TEMP"

action=added
revoke=
while :; do
	case "${1-}" in
		--) shift; break ;;
		--revoke) revoke=1; action=revoked ;;
		-h|--help) show_help ;;
		*) break;
	esac
	shift
done

if [ "$#" -gt 2 ]; then
	show_usage 'too many arguments.'
fi

if [ "$#" -lt 2 ]; then
	show_usage 'not enough arguments.'
fi

id=$(PROG="$PROG" girar-task-find-current "$1"); shift
num="$1"; shift

cd "$TASKS_DIR/$id"
repo="$(cat task/repo)"
owner="$(cat task/owner)"

repo="$(girar-normalize-repo-name "$repo")"
conf="$CONF_DIR/repo/$repo"
if [ -s "$conf" ]; then
        . "$conf"
fi

stamp="$(LC_TIME=C date -u '+%Y-%b-%d %T')"
found=
subtasks=
for i in $(gear_nums); do
	[ -d "$approve_dir/$i" ] && [ 'all' = "$num" -o "$i" = "$num" ] ||
		continue
	found=1
	dir_i="$my_acl_dir/$i"
	f="$dir_i/$GIRAR_USER"
	if [ -z "$revoke" ]; then
		if [ -s "$f" ]; then
			message "task #$id: subtask #$i is already $past"
		elif [ -s "$approve_dir/$i/$GIRAR_USER" ]; then
			message "task #$id: subtask #$i is already approved"
		elif [ -s "$disapprove_dir/$i/$GIRAR_USER" ]; then
			message "task #$id: subtask #$i is already disapproved"
		elif [ -d "$dir_i" -a -w "$dir_i" ]; then
			subtasks="$subtasks $i"
		else
			message "task #$id: subtask #$i cannot be $past"
		fi
	else
		if [ -s "$f" ]; then
			subtasks="$subtasks $i"
		else
			message "task #$id: subtask #$i has no $noun to revoke"
		fi
	fi
	[ 'all' = "$num" ] ||
		break
done

if [ -z "$found" ]; then
	if [ 'all' = "$num" ]; then
		text='no subtasks found'
	else
		text="subtask #$num not found"
	fi
	fatal "task #$id: $text"
fi

set -- $subtasks
[ $# -gt 0 ] ||
	exit 0

. girar-sh-tmpdir

if [ -z "$revoke" ]; then
	message "Go ahead and type the text of $noun"
	tr -cd '[:print:]\n' |
		tr -s '\n' |
		head -c 8192 > "$tmpdir/msg"
	tr -cd '[:alpha:]' < "$tmpdir/msg" |
		grep -qs ^. ||
		fatal "failed to obtain a meaningful text of $noun"
fi

for i; do
	f="$my_acl_dir/$i/$GIRAR_USER"
	if [ -z "$revoke" ]; then
		printf '%s :: %s by %s\n' "$stamp" "$past" "$GIRAR_USER" >> "$f"
		cat < "$tmpdir/msg" >> "$f"
	else
		rm "$f"
	fi
	message "task #$id: $action $noun of subtask #$i"
done

# Notify the owner.

[ "$owner" != "$GIRAR_USER" ] ||
	exit 0

author_name="$(girar-get-email-address "$GIRAR_USER" |
		sed -n 's/^"\([^"]\+\)".*/\1/p')"

email="$(girar-get-email-address "$owner")"
[ -n "$author_name" ] && [ -n "$email" ] ||
	exit 0

if [ $# -gt 1 ]; then
	text_summary="$GIRAR_USER has $action ${noun}s of $# subtasks"
	text_body="has $action ${noun}s of $# subtasks of task #$id"
else
	text_summary="$GIRAR_USER has $action $noun of subtask #$1"
	text_body="has $action an $noun of subtask #$1 of task #$id"
fi

url="$GITWEB_URL$TASKS_DIR/$id"

{
	cat <<__EOF__
From: Girar $PROG <girar-task-$infinitive@$EMAIL_DOMAIN>
To: $email
Cc: ${GIRAR_TASK_APPROVE_CC-}
X-girar-task-$infinitive: $action
X-girar-task-id: $id
X-girar-subtask-ids: $*
X-girar-task-repo: $repo
X-girar-task-URL: $url
Subject: [#$id] $text_summary
Content-Type: text/plain; charset=us-ascii

Dear $(printf %s "$email" | sed -n 's/^"\([^"]\+\)".*/\1/p')!

$author_name $text_body:
__EOF__

	for i; do
		if [ -s "gears/$i/dir" ]; then
			dir="$(cat "gears/$i/dir")"
			tag_name="$(cat "gears/$i/tag_name")"
			printf '%s:%s=%s\n' "$i" "${dir##*/}" "$tag_name"
		elif [ -s "gears/$i/srpm" ]; then
			printf '%s:srpm=%s\n' "$i" "$(cat "gears/$i/srpm")"
		elif [ -s "gears/$i/package" ]; then
			if [ -s "gears/$i/copy_repo" ]; then
				act=copy
			else
				act=del
			fi
			package="$(cat "gears/$i/package")"
			printf '%s:%s=%s\n' "$i" "$act" "$package"
		fi
	done

if [ -z "$revoke" ]; then
	printf '\n%s\n\n' "The text of $noun follows:"
	cat < "$tmpdir/msg"
fi

	printf '\n\n-- \n%s\n' "$url"
} > "$tmpdir/draft"

HOME="$tmpdir" mutt -x -H "$tmpdir/draft" </dev/null
message "task #$id: notified: $owner"
