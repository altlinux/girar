#!/bin/sh -efu

. girar-sh-functions
. shell-args

PROG0="$PROG"
PROG='task abort'

show_help()
{
	cat <<EOF
$PROG - abort a task

Usage: $PROG <task id>

If the task is not locked for processing yet, it will be dequeued immediately,
otherwise it will be marked for abortion which will happen later
at the first opportunity.
EOF
	exit
}

if [ "$#" -gt 1 ]; then
	show_usage 'too many arguments.'
fi

if [ "$#" -lt 1 ]; then
	show_usage 'not enough arguments.'
fi

if [ "$1" = '--help' ]; then
	show_help
fi

id=$(PROG="$PROG" girar-task-find-current "$1"); shift

cd "$TASKS_DIR/$id"

repo="$(cat task/repo)"
repo="$(girar-normalize-repo-name "$repo")"
owner="$(cat task/owner)"
[ "$owner" = "$GIRAR_USER" ] ||
	girar-check-superuser "$repo" ||
		fatal "task #$id belongs to $owner"

request_abort()
{
	if [ -f task/abort ]; then
		local aowner awhen
		aowner="$(stat -c %U task/abort)"
		aowner="${aowner#"$USER_PREFIX"}"
		awhen="$(stat -c %y task/abort)"
		fatal "task #$id abort already requested by $aowner at $awhen"
	fi
	touch task/abort
	local try iter log
	try=$(cat task/try)
	iter=$(cat task/iter)
	log="logs/events.$try.$iter.log"
	echo "$(LC_TIME=C date -u '+%Y-%b-%d %T') :: task abort requested by $GIRAR_USER." >> "$log"
	message "task #$id abort requested"
}

do_abort()
{
	message "task #$id was not locked, trying immediate abort"
	girar-task-change-state "$id" FAILED
	logger -t "$PROG0" "user=$GIRAR_USER task=$id repo=$repo"
	message "task #$id aborted"
}

try_abort()
{
	local state
	state=$(cat task/state)
	case "$state" in
		AWAITING|PENDING|POSTPONED)
			do_abort ;;
		NEW)
			fatal "task #$id is not yet submitted for processing" ;;
		DONE|EPERM|FAILED|SWEPT|TESTED)
			fatal "task #$id is already processed" ;;
		BUILDING|FAILING|COMMITTING)
			fatal "task #$id is in unexpected state \"$state\"" ;;
		*)
			fatal "task #$id is in unrecognized state \"$state\"" ;;
	esac
}

# obtain an exclusive lock on the TASKS structure
if flock -n 0; then
	try_abort
else
	request_abort
fi <.
