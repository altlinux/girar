#!/bin/sh -efu

. girar-sh-functions

PROG='check-subtask-perms'
usage()
{
	echo >&2 "$PROG: $*"
	echo >&2 "usage: $PROG <subtask id> <package name>"
	exit 1
}

mode=
case "${1-}" in
	--mode=*) mode="${1#--mode=}"; shift ;;
esac

is_rebuild=
if [ "${1-}" = '--is-rebuild' ]; then
	is_rebuild=--is-rebuild
	shift
fi

[ "$#" -ge 2 ] ||
	usage 'Not enough arguments.'
[ "$#" -le 2 ] ||
	usage 'Too many arguments.'

subtask="$1"; shift
[ -n "$subtask" ] && [ -z "$(printf %s "$subtask" |tr -d '[:digit:]')" ] ||
	fatal "invalid subtask id: $subtask"

pkg="$1"; shift

userid="$(cat gears/$subtask/userid)"
repo="$(cat task/repo)"
repo="$(girar-normalize-repo-name "$repo")"

# Source per-repository config file.
conf="$CONF_DIR/repo/$repo"
if [ -s "$conf" ]; then
	. "$conf"
fi

allow()
{
	message "#$subtask: $pkg: $*"
	[ -z "$mode" ] && exit 0
	exit 1
}

deny()
{
	message "#$subtask: $pkg: $*"
	exit 1
}

# check superuser disapprovals
disapproved="$(cd acl/disapproved/$subtask 2>/dev/null && shopt -s nullglob && set +f && echo [a-z]*)"
for a in $disapproved; do
	if GIRAR_USER="$a" girar-check-superuser "$repo"; then
		deny "disapproved by superuser $a"
	fi
done

# check author superuser permissions
if GIRAR_USER="$userid" girar-check-superuser "$repo"; then
	allow "allowed for superuser $userid"
fi

# check superuser approvals
approved="$(cd acl/approved/$subtask 2>/dev/null && shopt -s nullglob && set +f && echo [a-z]*)"
for a in $approved; do
	if GIRAR_USER="$a" girar-check-superuser "$repo"; then
		allow "approved by superuser $a"
	fi
done

maint="${GIRAR_ACL_MAINT_GROUP-}"
tester="${GIRAR_ACL_TESTER_GROUP-}"

# check other disapprovals
for a in $disapproved; do
	if GIRAR_USER="$a" girar-check-perms --silent=deny "$pkg" "$repo"; then
		deny "disapproved by $a"
	fi
	# check against @maint and @tester
	for g in "$maint" "$tester"; do
		if [ -n "$g" ] &&
		   GIRAR_USER="$a" girar-check-perms --silent=deny "@$g" "$repo"; then
			deny "disapproved by $a"
		fi
	done
done

# check author permissions
if GIRAR_USER="$userid" girar-check-perms --silent=deny $is_rebuild "$pkg" "$repo"; then
	allow "allowed for $userid"
fi

# check other approvals
for a in $approved; do
	if GIRAR_USER="$a" girar-check-perms --silent=deny "$pkg" "$repo"; then
		allow "approved by $a"
	fi
done

# check against @maint
approved_by_maint=
if [ -n "$maint" ]; then
	# check author permissions against @maint
	if GIRAR_USER="$userid" girar-check-perms --silent=deny "@$maint" "$repo"; then
		approved_by_maint="allowed for $userid"
	else
		# check other approvals against @maint
		for a in $approved; do
			if GIRAR_USER="$a" girar-check-perms --silent=deny "@$maint" "$repo"; then
				approved_by_maint="approved by $a"
				break
			fi
		done
	fi
fi

# check against @tester
approved_by_tester=
if [ -n "$tester" ]; then
	# check other approvals against @tester
	for a in $approved; do
		if GIRAR_USER="$a" girar-check-perms --silent=deny "@$tester" "$repo"; then
			approved_by_tester="approved by $a"
			break
		fi
	done
fi

mode_needs_approval_by()
{
	local g m status
	g="$1"; shift
	m="$1"; shift
	status="$1"; shift

	if [ -n "$g" ] && [ "$mode" = "needs-approval-by-$m" ]; then
		message "#$subtask: $pkg: $mode: $status"
		exit $status
	fi
}

if [ -n "$approved_by_maint$approved_by_tester" ]; then
	# it has to be approved both by @maint and @tester
	if [ -z "$approved_by_maint" ]; then
		mode_needs_approval_by "$maint" maint 0
		mode_needs_approval_by "$tester" tester 77
		if [ -n "$maint" ]; then
			deny "$approved_by_tester, needs an approval from a member of @$maint group"
		fi
	elif [ -z "$approved_by_tester" ]; then
		mode_needs_approval_by "$tester" tester 0
		mode_needs_approval_by "$maint" maint 77
		if [ -n "$tester" ]; then
			deny "$approved_by_maint, needs an approval from a member of @$tester group"
		fi
	else
		mode_needs_approval_by "$maint" maint 77
		mode_needs_approval_by "$tester" tester 77
		allow "$approved_by_maint, $approved_by_tester"
	fi
fi

mode_needs_approval_by "$maint" maint 0

# check author permissions again to print the error diagnostics
if GIRAR_USER="$userid" girar-check-perms "$pkg" "$repo"; then
	allow "allowed for $userid"
fi

if [ -n "$maint" ] && [ -n "$tester" ]; then
	deny "needs approvals from members of @$maint and @$tester groups"
fi

# the author is not permitted and nobody has approved
deny 'Operation not permitted'
