#!/bin/sh -efu

. girar-sh-functions
. shell-quote

PROG=girar-notes

repositories_file="$GIRAR_REPOSITORIES"
acl_dir="$GIRAR_ACL_CONF_DIR"
acl_state_dir="$GIRAR_ACL_STATE_DIR"

usage()
{
	echo >&2 "$PROG: $*"
	echo >&2 "usage: $PROG <binary-repository-name> [{<package>|@<group>} {add|del|leader|replace} <whitespace-separated-builders>]"
	exit 1
}

workdir=
cleanup()
{
	trap - EXIT
	[ -z "$workdir" ] || rm -rf -- "$workdir"
	exit "$@"
}

exit_handler()
{
	cleanup $?
}

signal_handler()
{
	cleanup 143
}

# Format: {<package>|@<group>} {add|del|leader|replace} builder [ builder ...]
parse_cmd()
{
	[ "$#" -ge 3 ] ||
		usage 'Not enough arguments.'

	local name qname action name_type acl_type

	name="$1"; shift
	qname="$(quote_sed_regexp "$name")"

	action="$1"; shift
	case "$action" in
		add|del|leader|replace) ;;
		*) fatal "$action: Invalid action" ;;
	esac

	if [ -z "${name##@*}" ]; then
		name_type='Group'
		acl_type='groups'
	else
		name_type='Project'
		acl_type='packages'
	fi
	leader="$(sed -n "s/^$qname[[:space:]]\+\([^[:space:]]\+\).*/\1/p" "$acl_dir/list.$acl_type.$repository")" ||
		fatal "$name_type \`$name' is not listed in acl file for repository \`$repository'"

	check_leader "$leader" ||
		fatal "$name $action: Permission denied"

	printf '%s\t%s\t%s\n' "$name" "$action" "$*"
}

[ -n "${GIRAR_USER-}" ] ||
	fatal "GIRAR_USER undefined"

[ "$#" -ge 1 ] ||
	usage 'Not enough arguments.'

repository="$1"
shift

# Abort if no non-empty repository list available.
[ -s "$repositories_file" ] ||
	fatal 'Sorry, list of available repositories is not available'

# Abort if requested binary repository is not listed.
fgrep -ixqse "$repository" "$repositories_file" ||
	fatal "Invalid repository \`$repository', valid repositories are: $(tr -s '\n' ' '<"$repositories_file")"

# Abort if acl spool dir for the repository is not available.
cd "$acl_state_dir/$repository"

trap exit_handler EXIT
trap signal_handler HUP PIPE INT QUIT TERM
workdir="$(mktemp -dt "$PROG.XXXXXXXX")" || exit 1

# If caller specified arguments, parse them,
# otherwise parse stdin line by line.
if [ $# -eq 0 ]; then
	while read -r cmd; do
		parse_cmd $cmd
	done
else
	parse_cmd "$@"
fi >"$workdir/$GIRAR_USER"

enable -f /usr/lib/bash/lockf lockf
builtin lockf -v "$acl_state_dir"
sleep 1
touch "$workdir/$GIRAR_USER"
mv -f -- "$workdir/$GIRAR_USER" .
