#!/bin/sh -efu

. girar-sh-functions
. shell-quote

PROG=girar-notes

repositories_file="$GIRAR_REPOSITORIES"
acl_dir="$GIRAR_ACL_CONF_DIR"
acl_state_dir="$GIRAR_ACL_STATE_DIR"

usage()
{
	echo >&2 "$PROG: $*"
	echo >&2 "usage: $PROG <repository> [{<package>|@<group>} {add|del|leader|replace} <whitespace-separated-builders>]"
	exit 1
}

workdir=
cleanup()
{
	trap - EXIT
	[ -z "$workdir" ] || rm -rf -- "$workdir"
	exit "$@"
}

exit_handler()
{
	cleanup $?
}

signal_handler()
{
	cleanup 143
}

check_leader()
{
	local leader loop qgroup grp
	leader="$1"; shift

	while [ -z "${leader##@*}" ]; do
		qgroup="$(quote_sed_regexp "$leader")"
		leader="$(sed -n -e "s/$qgroup[[:space:]]\+\([^[:space:]]\+\).*/\1/p" "$acl_dir/list.groups")" #"

		[ -n "$leader" ] ||
			fatal "$qgroup: Not found"

		[ -z "$loop" -o -n "${loop##* $leader *}" ] ||
			fatal "Loop detected"

		loop=" $loop $leader "
	done

	[ "$leader" = "$GIRAR_USER" ] ||
		fatal "Not enough permissions to commit this command"
}

# Format: {<package>|@<group>} {add|del|leader|replace} builder [ builder ...]
parse_cmd()
{
	[ "$#" -ge 3 ] ||
		usage 'Not enough arguments.'

	local name qname command builders suffix

	name="$1"; shift
	command="$1"; shift

	case "$command" in
		add|del|leader|replace) ;;
		*) fatal "Unknown command \`$command'" ;;
	esac

	qname="$(quote_sed_regexp "$name")"

	if [ -z "${name##@*}" ]; then
		leader="$(sed -n -e "s/^$qname[[:space:]]\+\([^[:space:]]\+\).*/\1/p" "$acl_dir/list.groups")" || #"
			fatal "Group \`$name' is not listed in acl file"
	else
		leader="$(sed -n -e "s/^$qname[[:space:]]\+\([^[:space:]]\+\).*/\1/p" "$acl_dir/list.packages.$repository")" || #"
			fatal "Project \`$name' is not listed in acl file for repository \`$repository'"
	fi

	check_leader "$leader"

	printf '%s\t%s\t%s\n' "$name" "$command" "$*"
}

[ -n "${GIRAR_USER:-}" ] ||
	fatal "GIRAR_USER undefined"

[ "$#" -ge 1 ] ||
	usage 'Not enough arguments.'

repository="$1"
shift

trap exit_handler EXIT
trap signal_handler HUP PIPE INT QUIT TERM
workdir="$(mktemp -dt "$PROG.XXXXXXXX")" || exit 1

fgrep -ixqse "$repository" "$repositories_file" ||
	fatal "Invalid repository \`$repository', valid repositories are: $(tr -s '\n' ' '<"$repositories_file")"

if [ "$#" -eq 0 ]; then
	while read cmd; do
		parse_cmd $cmd
	done
else
	parse_cmd "$@"
fi > "$workdir/$GIRAR_USER"

mv -f -- "$workdir/$GIRAR_USER" "$acl_state_dir/"
