#!/bin/sh -efu

. girar-sh-functions
. shell-quote
. shell-args

PROG0="$PROG"
PROG='task add'

show_help()
{
	cat <<EOF
$PROG - add a subtask to a task

Usage: $PROG [<task id> [<before subtask id>]] <action> ...

Actions:
  repo <gear repo> <gear tag>
  <gear repo>.git=<gear tag>
  srpm <srpm file>
  <srpm file without suffix>.src.rpm
  del <src package name>
  rebuild <src package name>
  copy <src package name> [<from binary repository name>]
  kmodules <kflavour>
EOF
	exit
}

if [ "${1-}" = '--help' ]; then
	show_help
fi

[ "$#" -le 5 ] || show_usage 'too many arguments.'
[ "$#" -ge 1 ] || show_usage 'not enough arguments.'

id=
subtask_id=
case "$1" in
	[1-9]*)	id=$(PROG="$PROG" girar-task-find-current "$1"); shift
		case "${1-}" in
			[1-7]*) subtask_id="$1"; shift ;;
		esac ;;
	*)	id=$(PROG="$PROG" girar-task-find-current) ;;
esac

[ "$#" -le 3 ] || show_usage 'too many arguments.'
[ "$#" -ge 1 ] || show_usage 'not enough arguments.'

action="$1"; shift

enable -f /usr/lib/bash/lockf lockf

dir=
gears_i_dir=
validate_repo_dir()
{
	local dir0
	dir0="$dir"
	dir="$(validate_local_exported_gitdir "$dir")"

	local gears_re people_re tasks_re
	gears_re="$GEARS_DIR/[A-Za-z0-9]/$PROJECT_NAME_REGEXP\\.git"
	people_re="$PEOPLE_DIR/$USER_NAME_REGEXP/packages/$PROJECT_NAME_REGEXP\\.git"
	tasks_re="$TASKS_DIR/[1-9][0-9]*/gears/[1-7][0-7]*/git"

	if printf '%s' "$dir" |grep -Exqse "$people_re|$gears_re"; then
		:
	elif printf '%s' "$dir" |grep -Exqse "$tasks_re"; then
		gears_i_dir="$(cat "$dir/../dir")"
	else
		fatal "$dir0: git repository does not belong to allowed directory tree"
	fi

	cd "$dir"
	# obtain a shared lock on the source git repository.
	builtin lockf -s -v .
	dir="$PWD"
}

validate_tag_name()
{
	git rev-parse --symbolic --tags |fgrep -xqse "$tag_name" ||
		fatal "$tag_name: tag name not found"
	tag_id="$(git rev-parse --verify "$tag_name")" ||
		fatal "$tag_name: tag verification failure"
	[ "$tag_name" = "$(git cat-file tag "$tag_id" | sed -n '/^tag /s///p')" ] ||
		fatal "$tag_name: tag name verification failure"
	if ! sig_text="$(GNUPGHOME=/usr/lib/alt-gpgkeys git -c gpg.program=girar-gpg verify-tag "$tag_id" 2>&1)"; then
		printf >&2 '%s\n' "$sig_text"
		fatal "$tag_name: tag signature verification failure"
	fi

	fpr="$(printf %s "$sig_text" |
		sed -r '/^gpg:[[:blank:]]+using [^[:blank:]]+ key 0x/!d;s///;q')"
	[ -n "$fpr" ] ||
		fatal "$tag_name: gpg fingerprint not found"

	tag_author="$(GNUPGHOME=/usr/lib/alt-gpgkeys gpg --list-keys "$fpr" 2>/dev/null |
		sed '/^uid[[:space:]]\+/!d;s///;q')"
	[ -n "$tag_author" ] ||
		fatal "$tag_name: gpg uid not found"
	# normalize email domain
	local qemail_domain qemail_fqdn
	quote_sed_regexp_variable qemail_domain "${EMAIL_DOMAIN%.*}"
	quote_sed_regexp_variable qemail_fqdn "$EMAIL_DOMAIN"
	tag_author="$(printf %s "$tag_author" |
		LANG=C sed 's/@'"$qemail_domain"'\.[a-z]\+>/@'"$qemail_fqdn"'>/')"

	local userid
	userid="$(printf %s "$tag_author" |
		LANG=C sed -n 's/^[^<]\+<[[:space:]]*\([a-z][a-z0-9_-]\+\)\([[:space:]]*@\|[[:space:]]\+at[[:space:]]\+\).*$/\1/p' |
		tr '[:upper:]' '[:lower:]' |tr - _)"
	[ -n "$userid" ] ||
		fatal "$tag_name: unacceptable signature: login name \`$userid' not found"
}

validate_rebuild_dir()
{
	local repo="${1-}"; shift
	local sym id

	sym="$(printf %s "$package" |cut -c1)"
	dir="$GEARS_DIR/$sym/$package.git"
	if [ ! -f "$dir/git-daemon-export-ok" ]; then
		action=srpm-rebuild
		validate_srpm_rebuild
		return
	fi

	cd "$dir"
	# obtain a shared lock on the source git repository.
	builtin lockf -s -v .
	dir="$PWD"

	id="$(git rev-parse --branches="[${repo:0:1}]${repo:1}")"
	if [ -z "$id" ]; then
		action=srpm-rebuild
		validate_srpm_rebuild
		return
	fi
	tag_name="$(git describe --exact-match "$id")"
	validate_tag_name
}

nevr=
validate_srpm()
{
	nevr="$(rpmquery -p --qf '%{name}\t%|epoch?{%{epoch}:}|%{version}-%{release}' -- "$srpm")" ||
		fatal "$srpm: rpmquery failed"
	package="${nevr%	*}"
	GB_REPO_NAME="$repo" sisyphus_check --files -- "$srpm" ||
		fatal "$srpm: sisyphus_check failed"
}

srpm_tmp_locked=
validate_srpm_build()
{
	[ -n "${srpm##*/*}" -a "$srpm" != "${srpm%.src.rpm}" ] ||
		fatal "$srpm: Invalid path"
	pushd "$INCOMING_DIR/$GIRAR_USER" >/dev/null
	[ -f "$srpm" ] ||
		fatal "$srpm: File not found"

	mkdir -p tmp
	if [ -z "$srpm_tmp_locked" ]; then
		# obtain an exclusive lock on the srpm tmp directory.
		builtin lockf -v tmp
		srpm_tmp_locked=1
	fi
	mv -- "$srpm" tmp/
	cd tmp

	validate_srpm

	girar-check-nevr-in-repo "$package" "${nevr#*	}" "$repo" ||
		fatal "$srpm: too old for \`$repo'"

	sid="$(rpmquery -p --qf 'srpm:%{sha1header}\n' -- "$srpm")" ||
		fatal "$srpm: rpmquery failed"
	girar-check-sid "$package" "${nevr#*	}" "$sid" "$repo" || {
		case "$?" in
			1) fatal "package \`$package' version \`${nevr#*    }' is already built but no source id was recorded" ;;
			2) fatal "package \`$package' version \`${nevr#*    }' is already built from a different source" ;;
		esac
	}

	popd >/dev/null
}

srpm_tmp_locked=
validate_srpm_rebuild()
{
	local repo_norm
	repo_norm="$(girar-normalize-repo-name "$repo")"
	srpm_name="$(printf %s "$package" |
		join -o2.3 - $STATE_DIR/repo/$repo_norm/release/latest/files/list/src.list)"
	srpm="$STATE_DIR/repo/$repo_norm/release/latest/files/SRPMS/$srpm_name"
	validate_srpm
}

handle_kmodules()
{
	local kimage qkflavour
	kimage="kernel-image-$kflavour"

	girar-check-package-in-repo "$kimage" "$repo" ||
		fatal "package \`$kimage' not found in \`$repo'"

	cd "$STATE_DIR/repo/$repo/release/latest/files/list"

	quote_sed_regexp_variable qkflavour "$kflavour"
	set -- $(sed -n "s/^\\(kernel-modules-[^[:space:]]\\+-$qkflavour\\)[[:space:]].*/\1/p" src.list)
	for m; do
		girar-task-add "$id" rebuild "$m"
	done
	echo >&2 "task #$id: added $# kernel modules for \`$kimage'"
}

case "$action" in
	repo)
	[ "$#" -eq 2 ] || show_usage 'not enough arguments.'
	dir="$1"; shift
	tag_name="$1"; shift
	;;
	del|rebuild)
	[ "$#" -le 1 ] || show_usage 'too many arguments.'
	[ "$#" -ge 1 ] || show_usage 'not enough arguments.'
	package="$1"; shift
	;;
	kmodules)
	[ "$#" -le 1 ] || show_usage 'too many arguments.'
	[ "$#" -ge 1 ] || show_usage 'not enough arguments.'
	[ -z "$subtask_id" ] ||
		show_usage "subtask #$subtask_id is not supported for \`$action' action"
	kflavour="$1"; shift
	;;
	copy)
	[ "$#" -ge 1 ] || show_usage 'not enough arguments.'
	package="$1"; shift
	copy_repo=
	if [ $# -ge 1 ]; then
		copy_repo="$1"; shift
	fi
	[ -n "$copy_repo" ] || copy_repo=sisyphus
	copy_repo="$(girar-normalize-repo-name "$copy_repo")"
	;;
	srpm)
	[ "$#" -le 1 ] || show_usage 'too many arguments.'
	[ "$#" -ge 1 ] || show_usage 'not enough arguments.'
	srpm="$1"; shift
	;;
	*.git=*)
	[ "$#" -eq 0 ] || show_usage 'too many arguments.'
	dir="${action%%=*}"
	tag_name="${action#*.git=}"
	action=repo
	;;
	*.src.rpm)
	[ "$#" -eq 0 ] || show_usage 'too many arguments.'
	srpm="$action"
	action=srpm
	;;
	*) show_usage "invalid action: $action" ;;
esac

cd "$TASKS_DIR/$id"
if [ "${GIRAR_TASK_LOCKED-}" != "$id" ]; then
	# obtain an exclusive lock on the TASKS structure
	builtin lockf -n . ||
		fatal "task #$id is locked"
	export GIRAR_TASK_LOCKED="$id"
fi

repo="$(cat task/repo)"
repo_conf="$CONF_DIR/repo/$(girar-normalize-repo-name "$repo")"
if [ -s "$repo_conf" ]; then
	. "$repo_conf"
fi

case "$action" in
	repo)
	validate_repo_dir
	validate_tag_name
	;;
	srpm)
	validate_srpm_build
	;;
	del)
	girar-check-package-in-repo "$package" "$repo" ||
		fatal "Invalid request to delete a nonexistent package \`$package' from \`$repo'"
	;;
	rebuild)
	girar-check-package-in-repo "$package" "$repo" ||
		fatal "Invalid request to rebuild a nonexistent package \`$package' in \`$repo'"
	validate_rebuild_dir $repo
	;;
	kmodules)
	handle_kmodules
	exit 0
	;;
	copy)
	[ "$repo" != "$copy_repo" ] ||
		fatal "Invalid request to copy package from \`$copy_repo' to \`$repo'"
	[ "$repo" != 'sisyphus' ] ||
		fatal "Invalid request to copy package to \`$repo'"
	girar-check-package-in-repo "$package" "$copy_repo" ||
		fatal "Invalid request to copy nonexistent package \`$package' from \`$copy_repo'"
	validate_rebuild_dir $copy_repo
	;;
esac
cd "$TASKS_DIR/$id"

check_task_modifiable

nums=$(gear_nums)

check_already_added_repo()
{
	local i
	for i in $nums; do
		[ -s gears/$i/dir ] || return 0
		local a_dir a_tag_name a_tag_id
		a_dir=$(cat gears/$i/dir)
		a_tag_name=$(cat gears/$i/tag_name)
		a_tag_id=$(cat gears/$i/tag_id)
		if [ "$a_tag_id" = "$tag_id" ]; then
			# same tag
			fatal "${dir##*/}: this tag $tag_name was already added (subtask #$i, from $a_dir $a_tag_name)"
		fi
		if [ "$a_tag_name" = "$tag_name" ] &&
		   [ "${a_dir##*/}" = "${dir##*/}" ]; then
			# different tags with the same name, from very similar git dirs.
			fatal "${dir##*/}: another tag $tag_name was already added (subtask #$i, from $a_dir)"
		fi
	done
}

check_already_added_package()
{
	local i
	for i in $nums; do
		[ -s gears/$i/package ] || continue
		local a_name reason
		a_name=$(cat gears/$i/package)
		[ "$a_name" = "$package" ] || continue
		if [ -f gears/$i/copy_repo ]; then
			reason="copy from $(cat gears/$i/copy_repo)"
		elif [ -f gears/$i/dir ]; then
			reason="rebuild from $(cat gears/$i/dir) $(cat gears/$i/tag_name)"
		else
			reason="deletion"
		fi
		fatal "package $package was already queued by $(cat gears/$i/userid) for $reason"
	done
}

check_already_added_srpm()
{
	local i
	for i in $nums; do
		[ -s gears/$i/srpm -a -s gears/$i/nevr ] || continue
		local a_nevr a_name
		a_nevr="$(cat gears/$i/nevr)"
		a_name="${a_nevr%	*}"
		[ "$a_name" = "$package" ] || continue
		fatal "package $(cat gears/$i/srpm) was already queued by $(cat gears/$i/userid) for build"
	done
}

check_already_added()
{
	case "$action" in
		repo)
		check_already_added_repo
		;;
		srpm|del|copy)
		check_already_added_srpm
		check_already_added_package
		;;
		rebuild)
		check_already_added_repo
		check_already_added_srpm
		check_already_added_package
		;;
	esac
}

check_add_first()
{
	[ -z "$subtask_id" ] ||
		fatal "subtask #$subtask_id not found"
	local task_owner
	task_owner=$(cat task/owner)
	[ "$GIRAR_USER" = "$task_owner" ] ||
		fatal "only $task_owner can add first subtask"
}

check_add_nth()
{
	if [ -n "$subtask_id" ]; then
		local i
		for i in $nums; do
			[ "$i" != "$subtask_id" ] || break
		done
		[ "$i" = "$subtask_id" ] ||
			fatal "subtask #$subtask_id not found"
	fi
	[ -w gears ] ||
		fatal 'gears: Permission denied'
}

find_new_subtask_id()
{
	local i
	if [ -z "$subtask_id" ]; then
		i=$(printf %s "$nums" |tail -n1)
		printf %o $((0$i+0100))
		return
	fi
	local prev=
	for i in $nums; do
		[ "$i" != "$subtask_id" ] || break
		prev="$i"
	done
	[ "$i" = "$subtask_id" ] ||
		fatal "subtask #$subtask_id not found"
	[ -n "$prev" ] || prev=0
	i=$(((0$prev+0$subtask_id)/2))
	i=$(printf %o "$i")
	[ "$i" -gt "$prev" -a "$i" -lt "$subtask_id" ] ||
		fatal "no room left before subtask #$subtask_id"
	printf %s $i
}

if [ -n "$nums" ]; then
	check_add_nth
	check_already_added
	i=$(find_new_subtask_id)
else
	check_add_first
	i=100
fi


logger -t "$PROG0" "user=$GIRAR_USER task=$id subtask=$i"

atexit()
{
	local rc=$?
	trap - EXIT
	[ "$rc" -eq 0 ] || rm -rf gears/"$i"/ acl/"$i"/
	exit $rc
}

trap '' HUP INT QUIT PIPE TERM
# gears are not shared by default
mkdir -pm755 gears acl
mkdir -m2775 gears/"$i"
mkdir -m3775 acl/"$i"
trap atexit EXIT

case "$action" in
	del)
	printf '%s\n' "$package" >gears/$i/package
	printf '%s\n' "$GIRAR_USER" >gears/$i/userid
	girar-task-change-state "$id" NEW
	girar-webapi-subtask create "$id" "$i"
	echo >&2 "task #$id: added #$i: delete package $package from $repo"
	exit 0
	;;
	srpm)
	mv -- "$INCOMING_DIR/$GIRAR_USER/tmp/$srpm" gears/$i/
	printf '%s\n' "$srpm" >gears/$i/srpm
	printf '%s\n' "$GIRAR_USER" >gears/$i/userid
	printf '%s\n' "$nevr" >gears/$i/nevr
	rpmquery --qf 'srpm:%{sha1header}\n' -p gears/$i/"$srpm" >gears/$i/sid
	girar-task-change-state "$id" NEW
	girar-webapi-subtask create "$id" "$i"
	echo >&2 "task #$id: added #$i: build srpm $srpm"
	exit 0
	;;
	srpm-rebuild)
	install -p -- "$srpm" gears/$i/
	printf '%s\n' "$srpm_name" >gears/$i/srpm
	printf '%s\n' "$GIRAR_USER" >gears/$i/userid
	printf '%s\n' "$nevr" >gears/$i/nevr
	rpmquery --qf 'srpm:%{sha1header}\n' -p gears/$i/"$srpm_name" >gears/$i/sid
	touch gears/$i/rebuild
	girar-task-change-state "$id" NEW
	girar-webapi-subtask create "$id" "$i"
	echo >&2 "task #$id: added #$i: rebuild srpm $srpm_name"
	exit 0
	;;
esac

[ -n "$gears_i_dir" ] || gears_i_dir="$dir"
printf '%s\n' "$gears_i_dir" >gears/$i/dir
printf '%s\n' "$tag_name" >gears/$i/tag_name
printf '%s\n' "$tag_id" >gears/$i/tag_id
printf '%s\n' "gear:$tag_id" >gears/$i/sid
printf '%s\n' "$tag_author" >gears/$i/tag_author
printf '%s\n' "$GIRAR_USER" >gears/$i/userid
if [ "$action" = rebuild ]; then
	printf '%s\n' "$package" >gears/$i/package
fi

GIT_DIR=gears/$i/git
export GIT_DIR
mkdir "$GIT_DIR"
git init -q --template=/var/empty
if [ "$action" = rebuild ]; then
	echo "$dir/objects" > "$GIT_DIR"/objects/info/alternates
fi
printf >&2 %s "fetching tag \"$tag_name\" from $dir... "
git fetch -q --recurse-submodules=no "$dir" tag "$tag_name"
echo >&2 done
git branch master "tags/$tag_name"
git tag -l --points-at master |
	while read t; do
		[ "$t" = "$tag_name" ] ||
			git tag -d "$t" > /dev/null
	done
if git cat-file tag "$tag_id" | grep -Eqs '^X-(gear|girar)-specsubst:'; then
	git tag -l | grep -Fxve "$tag_name" |
	while read t; do
		git cat-file tag "$t" |
		   grep -Eqs '^X-(gear|girar)-specsubst:' ||
			   continue
		git tag -d "$t" > /dev/null
	done
fi
git pack-refs --all --prune
find "$GIT_DIR/refs" -mindepth 1 -type d -delete ||:
touch "$GIT_DIR/git-daemon-export-ok"

if [ -O gears ]; then
	# git directories should be writable by builder
	find "$GIT_DIR" -type d -execdir chmod g+w -- '{}' '+'
else
	# directories added to alien task should be writable by task owner
	find "gears/$i" -type d -execdir chmod g+w -- '{}' '+'
fi

pkg_tar="gears/$i/pkg.tar"
printf >&2 %s "generating pkg.tar for ${dir##*/} tag \"$tag_name\"... "
if env TZ=UTC gear ${GEAR_ARGS-} -t "$tag_name" -- "$pkg_tar" &&
   [ -s "$pkg_tar" ]; then
	echo >&2 done
else
	rm -f "$pkg_tar"
	fatal "failed to create pkg.tar for ${dir##*/} tag \"$tag_name\""
fi

girar-task-change-state "$id" NEW
girar-webapi-subtask create "$id" "$i"

echo >&2 "task #$id: added #$i: build tag \"$tag_name\" from $dir"
