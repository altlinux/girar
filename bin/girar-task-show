#!/bin/sh -efu

. girar-sh-functions
. shell-args

PROG='task show'

show_help()
{
cat <<EOF
$PROG - show a task

Usage: $PROG [options] [<task id>]

Options:
  --brief       use brief output format;
  --help        show this text and exit.
EOF
	exit
}

brief=
while :; do
	case "${1-}" in
		--help) show_help ;;
		--brief) brief=1 ;;
		*) break ;;
	esac
	shift
done

if [ "$#" -gt 1 ]; then
	show_usage 'too many arguments.'
fi

id=$(PROG="$PROG" girar-task-find-current "$@")
cd "$TASKS_DIR/$id"

printf 'id=%d' "$id"
enable -f /usr/lib/bash/lockf lockf
printf ' locked=%s' "$(builtin lockf -n . && echo no || echo yes)"
printf ' shared=%s' "$(find gears -maxdepth 0 -path gears -type d -perm -g=w -printf yes -or -printf no 2>/dev/null || echo no)"
printf ' fail_early=%s' "$(test -f task/fail-early && echo yes || echo no)"
printf ' test_only=%s' "$(test -f task/test-only && echo yes || echo no)"
if [ -f task/swift ]; then
	printf ' swift=yes'
fi
if [ -f task/abort ]; then
	aowner="$(stat -c %U task/abort)"
	aowner="${aowner#git_}"
	printf ' aborted_by=%s' "$aowner"
fi
printf ' repo=%s' "$(cat task/repo)"
printf ' owner=%s' "$(cat task/owner)"
printf ' state=%s' "$(cat task/state)"
printf ' try=%s' "$(cat task/try 2>/dev/null ||:)"
printf ' iter=%s' "$(cat task/iter 2>/dev/null ||:)"
if [ -s task/depends ]; then
	printf ' depends=%s' "$(tr -s '[:space:]' , < task/depends | sed 's/,$//')"
fi
echo

nums="$(gear_nums)"
[ -n "$nums" ] || exit 0

for i in $nums; do
	if [ -s "gears/$i/dir" ]; then
		dir="$(cat "gears/$i/dir")"
		tag_name="$(cat "gears/$i/tag_name")"
		if [ -z "$brief" ]; then
			printf ' %s:dir=%s\n' "$i" "$dir"
			printf ' %s:tag_name=%s\n' "$i" "$tag_name"
			printf ' %s:tag_id=%s\n' "$i" "$(cat "gears/$i/tag_id")"
			printf ' %s:tag_author=%s\n' "$i" "$(cat "gears/$i/tag_author")"
			pkg_tar="gears/$i/pkg.tar"
			if [ -s "$pkg_tar" ]; then
				printf ' %s:fetched=%s\n' "$i" \
					"$(LC_TIME=C date -r "$pkg_tar" '+%FT%T')"
			fi
		else
			printf ' %s:%s=%s\n' "$i" "${dir##*/}" "$tag_name"
		fi
	elif [ -s "gears/$i/srpm" ]; then
		printf ' %s:srpm=%s\n' "$i" "$(cat "gears/$i/srpm")"
	elif [ -s "gears/$i/package" ]; then
		if [ -s "gears/$i/copy_repo" ]; then
			[ -z "$brief" ] &&
				printf ' %s:copy_repo=%s\n' "$i" "$(cat "gears/$i/copy_repo")" ||
				action=copy
		else
			[ -z "$brief" ] &&
				printf ' %s:delete\n' "$i" ||
				action=del
		fi
		package="$(cat "gears/$i/package")"
		[ -z "$brief" ] &&
			printf ' %s:package=%s\n' "$i" "$package" ||
			printf ' %s:%s=%s\n' "$i" "$action" "$package"
	fi
	if [ -z "$brief" ]; then
		printf ' %s:userid=%s\n' "$i" "$(cat "gears/$i/userid")"
		if [ -d "acl/$i" ]; then
			approved_by="$(find "acl/$i" -mindepth 1 -maxdepth 1 -type f -printf '%f ')"
			[ -z "$approved_by" ] ||
				printf ' %s:approved_by=%s\n' "$i" "$approved_by"
		fi
		if [ -f "build/$i/pkgname" ]; then
			printf ' %s:pkgname=%s\n' "$i" "$(cat "build/$i/pkgname")"
		fi
		if [ -f "check-git-inheritance/$i" ]; then
			printf ' %s:relax_git_inheritance_check_for_commit=%s\n' "$i" "$(cat "check-git-inheritance/$i")"
		fi
	fi
done
