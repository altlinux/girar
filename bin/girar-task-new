#!/bin/sh -efu

. girar-sh-functions
. shell-args

PROG0="$PROG"
PROG='task new'

show_help()
{
	cat <<EOF
$PROG - create a new task

Usage: $PROG [<binary repository name>]

Valid binary repository names are: $(valid_repositories)
EOF
	exit
}

if [ "${1-}" = '--help' ]; then
	show_help
fi

if [ "$#" -gt 1 ]; then
	show_usage 'too many arguments.'
fi

default_repo="${GIRAR_DEFAULT_REPO:-sisyphus}"
repo="$(girar-normalize-repo-name "${1:-$default_repo}")"

cd "$TASKS_DIR"

[ -w .max-task-id ] ||
	fatal 'Permission denied'

cd index/"$repo"/new ||
	fatal "index tree for '$repo' is not available"
cd - >/dev/null

# dumb protection against frequent runs
sleep 1

enable -f /usr/lib/bash/lockf lockf
# obtain an exclusive lock on $TASKS_DIR
builtin lockf -v .

id=$(cat .max-task-id)
id=$(($id+1))

logger -t "$PROG0" "user=$GIRAR_USER task=$id repo=$repo"

trap '' HUP INT QUIT PIPE TERM
printf '%s\n' "$id" >.max-task-id

atexit()
{
	local rc=$?
	trap - EXIT
	[ "$rc" -eq 0 ] || rm -rf "$id"
	exit $rc
}

mkdir "$id"
# obtain an exclusive lock on the TASKS structure
builtin lockf -v "$id"
trap atexit EXIT
mkdir "$id"/task
printf '%s\n' "$id" >"$id"/task/id
printf '%s\n' "$GIRAR_USER" >"$id"/task/owner
printf '%s\n' "$repo" >"$id"/task/repo
touch "$id"/task/state "$id"/task/run \
      "$id"/task/fail-early "$id"/task/test-only
for u in ${GIRAR_LOW_PRIORITY_USERS-}; do
	if [ "$u" = "$GIRAR_USER" ]; then
		touch "$id"/task/idle
		break
	fi
done
girar-task-change-state "$id" NEW
chmod g+w -- "$id"/task/state "$id"/task/run
chmod g+rws,o+t -- "$id"/task "$id"

girar-webapi-task create "$id"

echo >&2 "new task #$id: owner=$GIRAR_USER repo=$repo"
printf '%s\n' "$id"
