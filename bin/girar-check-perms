#!/bin/sh -efu

. girar-sh-functions
. shell-quote

[ -n "${GIRAR_USER-}" ] ||
	fatal 'GIRAR_USER undefined'

usage()
{
	echo >&2 "$PROG: $*"
	echo >&2 "usage: $PROG <project name> <binary package repository name>"
	echo >&2 "    or $PROG @<group name> <binary package repository name>"
	exit 1
}

[ "$#" -ge 2 ] ||
	usage 'Not enough arguments.'
[ "$#" -le 2 ] ||
	usage 'Too many arguments.'

project_name="$1"; shift
repo="$1"; shift

is_group=
case "$project_name" in
	@*)
		groups="$project_name"
		quote_sed_regexp_variable qgroups "$groups"
		[ -n "${groups#@}" -a "$groups" = "$qgroups" ] ||
			fatal "$groups: invalid group name"
		is_group=1
		;;
esac

allow()
{
	message "access to $project_name ALLOWED for $GIRAR_USER: $*"
	exit 0
}

deny()
{
	message "access to $project_name DENIED for $GIRAR_USER: $*"
	exit 1
}

cd

# Returns:
# 0 - $GIRAR_USER is allowed to request access to $project_name for binary $repository;
# 1 - otherwise.

repository="$(girar-normalize-repo-name "$repo")" ||
	deny "invalid repository \`$repository'"

# Denied if no acl file available for the given binary repository.
[ -f "$ACL_DIR/list.packages.$repository" ] ||
	deny "acl file for repository \`$repository' not available"

# Allowed if $GIRAR_USER is superuser.
if girar-check-superuser "$repository"; then
	allow 'superuser'
fi

# Denied if user is not a maintainer yet.
getent group $MAINTAINERS_GROUP | cut -d: -f4 | tr , '\n' | grep -Fxqs "$USER_PREFIX$GIRAR_USER" ||
	deny 'does not belong to maintainers list yet'

# Source per-repository config file.
conf="$CONF_DIR/repo/$repository"
if [ -s "$conf" ]; then
	. "$conf"
fi

unlisted_is_allowed()
{
	[ -n "${GIRAR_ACL_DENY_UNLISTED-}" ] ||
		return 0

	local u
	for u in ${GIRAR_ACL_USERS_ALLOWED_UNLISTED-}; do
		[ "$GIRAR_USER" = "$u" ] ||
			continue
		return 0
	done

	return 1
}

if [ -z "$is_group" ]; then
	# Allowed if package is not listed in acl file.
	if ! acl_line="$(grep "^$project_name[[:space:]]" "$ACL_DIR/list.packages.$repository")"; then
		if unlisted_is_allowed; then
			exit=allow
		else
			exit=deny
		fi
		$exit "project \`$project_name' is not listed in acl file for repository \`$repository'"
	fi

	# acl_line format: pkg_name leader [builders]
	set -- ${acl_line}
	[ $# -ge 2 ] ||
		deny "acl file for repository \`$repository' contains invalid acl entry: $acl_line"
	leader="$2"; shift 2
	builders="$*"

	# Allowed if $GIRAR_USER is leader.
	[ "$GIRAR_USER" != "$leader" ] ||
		allow 'project leader'

	# Allowed if there are no leader
	[ "$leader" != '@nobody' ] ||
		allow 'project is orphaned'

	# Wildcard builders are allowed.
	case " $builders " in
		*' * '*|*' @everybody '*)
			allow 'project leader welcomes random builders' ;;
	esac

	# Separate people and groups.
	groups=
	people=
	for o in ${leader} ${builders}; do
		[ -z "${o%%@*}" ] &&
			groups="$groups|$o" ||
			people="$people $o"
	done
	groups="${groups#|}"

	# Allowed if $GIRAR_USER is listed in $people.
	if printf %s " $people " |fgrep -qs " $GIRAR_USER "; then
		allow 'approved builder'
	fi
fi

# Expand groups if any.
if [ -n "$groups" -a -s "$ACL_DIR/list.groups.$repository" ]; then
	gpeople="$(sed -r -n "s/^($groups)[[:space:]]+//p" "$ACL_DIR/list.groups.$repository")"
	gpeople="$(printf %s "$gpeople" |tr -s '[:space:]' ' ')"

	# Allowed if $GIRAR_USER is listed in $gpeople.
	if printf %s " $gpeople " |fgrep -qs " $GIRAR_USER "; then
		allow 'member of approved group'
	fi
fi

if [ -z "$is_group" ]; then
	deny "does not belong to approved builders list: $leader $builders"
else
	deny "does not belong to group $groups"
fi
