#!/bin/sh -efu

. girar-sh-functions

. shell-error
. shell-quote

acl_conf_dir="$GIRAR_ACL_CONF_DIR"
acl_state_dir="$GIRAR_ACL_STATE_DIR"

enable -f /usr/lib/bash/lockf lockf
builtin lockf -v "$acl_conf_dir"
builtin lockf -v "$acl_state_dir"

workdir=
cleanup()
{
	trap - EXIT
	[ -z "$workdir" ] || rm -rf -- "$workdir"
	exit "$@"
}

exit_handler()
{
	cleanup $?
}

signal_handler()
{
	cleanup 143
}

make_workdir()
{
	[ -z "$workdir" ] || return 0
	trap exit_handler EXIT
	trap signal_handler HUP PIPE INT QUIT TERM
	workdir="$(mktemp -dt "$PROG.XXXXXXXX")" || exit 1
}

writelog()
{
	[ "$#" -eq 1 ] || return 0
	printf '%s\n' "$cmd_info" >>"$srcfile"
	printf '%s\n' "$1"   >>"$logfile"
}

process_user_rules()
{
	local b builder changed cmd e end_time p pkg qpkg rulesfile s start_time
	rulesfile="$1"; shift

	while read pkg cmd builder start_time end_time; do
		case "$pkg" in
			''|\#*)
				continue
				;;
		esac
		case "$cmd" in
			add)
				changed=
				while read p b s e; do
					if [ "$pkg" != "$p" ]; then
						printf '%s\t%s\t%s\t%s\n' \
							"$p" "$b" "$s" "$e"
						continue
					fi

					if [ "$builder" = "$b" ]; then
						:
					elif [ "$b" = '*' -o "$builder" = '*' ]; then
						builder='*'
					else
						printf '%s\t%s\t%s\t%s\n' \
							"$pkg" "$builder" "$start_time" "$end_time"
						continue
					fi

					[ $start_time -lt $s ] || start_time="$s"
					[ $end_time -gt $e ]   || end_time="$e"

					printf '%s\t%s\t%s\t%s\n' \
						"$pkg" "$builder" "$start_time" "$end_time"
					changed=1

				done <"list/list.nmu.$repository" >new

				[ -n "$changed" ] ||
						printf '%s\t%s\t%s\t%s\n' \
							"$pkg" "$builder" "$start_time" "$end_time" >> new

				sort -uo "list/list.nmu.$repository" new
				;;
			del)
				quote_pkg="$(quote_sed_regexp "$pkg")"
				quote_builder="$(quote_sed_regexp "$builder")"

				sed -i "/^$quote_pkg[[:space:]]$quote_builder[[:space:]]$start_time[[:space:]]$end_time/d" \
					"list/list.nmu.$repository"
				;;
		esac
	done <"$rulesfile"
}

make_workdir
cd "$workdir"

mkdir -- list mails

# Copy all active acl files to workdir.
find "$acl_conf_dir" -type f -name 'list.nmu.*' \
	-exec cp -at list -- \{\} \+

# Handle new spooled acl files in ascending modification time order.
find "$acl_state_dir" -mindepth 2 -maxdepth 2 -type f \
	-newer "$acl_state_dir/nmu.stamp" -name '*.nmu' -printf '%T@\t%p\n' |
	sort |
	cut -f2 |
while read rulesfile; do

	person="${rulesfile##*/}"
	person="${person%.nmu}"

	repository="${rulesfile%/*}"
	repository="${repository##*/}"

	logfile="mails/$person.$repository.status"
	srcfile="mails/$person.$repository.source"

	# Store information required for sending emails at the end of processing.
	printf '%s %s %s %s\n' "$person" "$repository" "$srcfile" "$logfile" >>mails/info

	if process_user_rules "$rulesfile"; then
		# Install all working acl files as active.
		find list -type f -name 'list.nmu.*' \
			-exec cp -at "$acl_conf_dir" -- \{\} \+
	else
		# Copy all active acl files to workdir.
		find "$acl_conf_dir" -type f -name 'list.nmu.*' \
			-exec cp -at list -- \{\} \+
	fi
	rm -f -- "$rulesfile"
done

# Update timestamp.
touch -- "$acl_state_dir"/nmu.stamp
sleep 1
