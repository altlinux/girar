#!/bin/sh -efu

. "@CMDDIR@/girar-sh-functions"

PROG=girar-build
user_prefix="@USER_PREFIX@"
repositories_file="@GIRAR_REPOSITORIES@"
acldir="@GIRAR_ACL@"

usage()
{
	echo "$PROG: $*" >&2
	echo "usage: $PROG <git repository> <tag> <binary package repository> [<project name>]" >&2
	exit 1
}

[ "$#" -ge 3 ] ||
	usage 'Not enough arguments.'
[ "$#" -le 4 ] ||
	usage 'Too many arguments.'

repository=
project_name=
# Return: 0 if $GIRAR_USER is allowed to request build of $project_name for $repository, and 1 otherwise.
check_perms()
{
	# allowed if no non-empty repositories file available
	[ -s "$repositories_file" ] || return 0

	fgrep -xqs "$repository" "$repositories_file" ||
		fatal "$repository: invalid repository, valid repositories are: $(tr '\n' ' '<"$repositories_file")"

	# allowed if no acl file available for given ref_name
	[ -s "$acldir/list.packages.$repository" ] || return 0

	local aclline builders groups= humans= leader o

	# allowed if package is not listed
	aclline="$(grep "^$project_name " "$acldir/list.packages.$repository")" || return 0

	# aclline format: pkg_name leader builders
	set -- ${aclline}; shift
	leader="$1"; shift
	builders="$*"

	# leader and "*" are allowed
	[ "$GIRAR_USER" != "$leader" -a "$builders" != "*" ] || return 0

	# expand groups if any
	if [ -z "${builders#*@*}" -a -s "$acldir/list.groups.$repository" ]; then
		for o in ${builders}; do
			[ -z "${o%%@*}" ] &&
				groups="$groups|$o" ||
				humans="$humans $o"
		done
		builders="$humans $(sed -r -ne "s/^(${groups#|}) +//p" "$acldir/list.groups.$repository")" #"
	fi
	printf %s "$builders" |grep -qs "\<$GIRAR_USER\>"
}

[ -n "${GIRAR_USER:-}" ] || 
	fatal "GIRAR_USER undefined"

cd "$HOME"

dir0="$1"; shift
dir="${dir0#$PWD/}"
[ "${dir#/}" = "$dir" ] ||
	fatal "$dir0: invalid git repository name"

dir="$(validate_packages_dir "$dir")"
dir="$(add_git_suffix "$dir")"
[ -d "$dir" ] ||
	fatal "$dir0: directory not available"

[ -z "${dir%%packages/*}" ] ||
	fatal "$dir0: directory should belong to packages/"

cd "$dir"

tag="$1"; shift
GIT_DIR=. git-rev-parse --symbolic --tags |fgrep -xqse "$tag" ||
	fatal "$tag: invalid tag name"
GIT_DIR=. GNUPGHOME=/usr/lib/alt-gpgkeys git-verify-tag "$tag" ||
	fatal "$tag: invalid tag"

repository="$1"; shift
[ -n "$repository" ] &&
printf %s "$repository" |egrep -qs '^[A-Za-z0-9][A-Za-z0-9_-.]+$' ||
	fatal "$repository: invalid binary package repository name"

project_name="${PWD##*/}"
project_name="${project_name%.git}"
if [ $# -gt 0 ]; then
	project_name="$1"; shift
fi
[ -n "$project_name" ] &&
printf %s "$project_name" |egrep -qs "$project_name_regexp" ||
	fatal "$project_name: invalid project name"

check_perms ||
	fatal "permission denied"

exec "@CMDDIR@/girar-queue-tag" "$GIRAR_USER" "$project_name" "$PWD" "$tag" "$repository"
