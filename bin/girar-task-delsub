#!/bin/sh -efu

. girar-sh-functions
. shell-args

PROG0="$PROG"
PROG='task delsub'

show_help()
{
	cat <<EOF
$PROG - remove a subtask from a task

Usage: $PROG <task_id> <subtask_number>
EOF
	exit
}

if [ "${1-}" = '--help' ]; then
	show_help
fi

if [ "$#" -gt 2 ]; then
	show_usage 'too many arguments.'
fi

if [ "$#" -lt 2 ]; then
	show_usage 'not enough arguments.'
fi

id=$(PROG="$PROG" girar-task-find-current "$1"); shift
num="$1"; shift

cd "$TASKS_DIR/$id"
repo="$(cat task/repo)"
girar-normalize-repo-name "$repo" >/dev/null
# obtain an exclusive lock on the TASKS structure
exec <.
flock -n 0 ||
	fatal "task #$id is locked"

[ -w gears ] ||
	fatal 'gears: Permission denied'

check_task_modifiable

set -- $(gear_nums)
for i; do
	[ "$i" = "$num" ] || continue
	[ -w "gears/$i" ] ||
		fatal "gears/$i: Permission denied"
	[ -e "acl/approved/$i" ] ||
		fatal "task #$id: subtask #$i: nothing to remove"
	logger -t "$PROG0" "user=$GIRAR_USER task=$id subtask=$i"
	trap '' HUP INT QUIT PIPE TERM
	# del/copy
	rm -f gears/$i/package gears/$i/copy_repo
	# rebuild
	rm -f gears/$i/rebuild_from
	# srpm
	if [ -s gears/$i/srpm ]; then
		srpm="$(cat "gears/$i/srpm")"
		rm -f "gears/$i/$srpm"
	fi
	rm -f gears/$i/srpm gears/$i/nevr
	# gear
	rm -f gears/$i/dir gears/$i/tag_name gears/$i/tag_id gears/$i/tag_author
	rm -rf gears/$i/git
	rm -f gears/$i/pkg.tar
	if [ -s gears/$i/type ]; then
		rm -rf "$ARTIFACTS_DIR/$id/$i"
		rm -f gears/$i/type
	fi
	# common
	rm -rf build/$i
	rm -rf acl/approved/$i acl/disapproved/$i

	girar-task-change-state "$id" NEW
	girar-hook-event subtask delete "$id" "$i"

	trap - HUP INT QUIT PIPE TERM
	echo >&2 "task #$id: removed subtask #$i"
	exit
done
fatal "task #$id: subtask #$num not found"
