#!/bin/sh -efu

. girar-sh-functions

[ -n "${GIRAR_USER-}" ] ||
	fatal 'GIRAR_USER undefined'

. shell-args

PROG=build

show_help()
{
cat <<EOF
$PROG - create a task, add subtasks, and queue for build.

Usage: $PROG [options] <build_instruction_1> ...

where each <build_instruction_N> is either
\`<gear_repo> <gear_tag>' or \`<gear_repo>.git=<gear_tag>'
or \`srpm <srpm_file>' or \`<srpm_file_without_suffix>.src.rpm'
or \`rebuild <package_name>' or \`del <package_name>'
or \`copy <package_name>'.

Options:
  -m <word>       use the given <word> as the reason for this build;
  -m -            read full build reason message from stdin;
  -b <binary_repository_name>     set a target binary package repository;
  --deps <deps>   set a comma-separated list of required task id numbers;
  --fail-early    stop building the task after the first error;
  --fail-late     do not stop building the task after the first error;
  --test-only     stop building the task after tests, do not commit;
  --commit        commit the task after tests;
  --help          show this text and exit.
EOF
	exit
}

TEMP="$(getopt -n "$PROG" -o b:m: -l commit,deps:,fail-early,fail-late,test-only,help -- "$@")" ||
	show_usage
eval set -- "$TEMP"

deps=
repo=
fail_mode=
test_mode=
task_msg=
while :; do
	case "$1" in
		--) shift; break ;;
		-b) shift; repo="$1" ;;
		-m) shift; task_msg="$1" ;;
		--deps) shift; deps="$1" ;;
		--fail-early|--fail-late) fail_mode="$1" ;;
		--commit|--test-only) test_mode="$1" ;;
		--help) show_help ;;
		*) show_usage "unrecognized option: $1" ;;
	esac
	shift
done

[ $# -ge 1 ] ||
	show_usage 'not enough arguments.'

if [ -n "$task_msg" ]; then
	task_msg="$(if [ "$task_msg" = '-' ]; then
			message 'Go ahead and type the text of your message.'
			cat
		else
			printf %s "$task_msg"
		fi |
			tr -cd '[:print:]\n' |
			tr -s '[:space:]' ' ' |
			head -c 1024)"
	task_msg="${task_msg% }"
	printf %s "$task_msg" |
		tr -cd '[:alpha:]' |
		grep -qs ^. ||
		fatal 'task message does not look like a meaningful phrase'
fi

default_repo="${GIRAR_DEFAULT_REPO:-sisyphus}"
repo="$(girar-normalize-repo-name "${repo:-$default_repo}")"

# Source per-repository config file.
conf="$CONF_DIR/repo/$repo"
if [ -s "$conf" ]; then
	. "$conf"
fi

add_subtasks()
{
	local arg cmd= del= rebuilds=
	for arg; do
		[ -n "$arg" ] ||
			show_usage 'invalid empty argument.'
		case "$cmd" in
			'')
				case "$arg" in
					*.git=*|*.src.rpm)
						$dry_run girar-task add "$id" "$arg"
						cmd= ;;
					*)
						cmd="$arg" ;;
				esac
				;;
			del)
				del=1
				$dry_run girar-task add "$id" "$cmd" "$arg"
				cmd= ;;
			rebuild)
				rebuilds=1
				$dry_run girar-task add "$id" "$cmd" "$arg"
				cmd= ;;
			copy|srpm)
				$dry_run girar-task add "$id" "$cmd" "$arg"
				cmd= ;;
			*)
				$dry_run girar-task add "$id" repo "$cmd" "$arg"
				cmd= ;;
		esac
	done
	[ -z "$cmd" ] ||
		show_usage 'not enough arguments.'
	if [ -z "$task_msg" ]; then
		[ -z "$del" ] ||
			show_usage 'contains explicit package removals, please specify a reason for that'
		[ -z "$rebuilds" ] ||
			show_usage 'contains package rebuilds, please specify a reason for that'
		[ -z "${GIRAR_ACL_MAINT_GROUP-}" ] ||
		[ "$test_mode" = '--test-only' ] ||
			show_usage "a reason must be specified for '$repo' repository"
	fi
}

# Basic sanity check.
dry_run=:
id=
add_subtasks "$@"

atexit()
{
	local rc=$?
	trap - EXIT
	[ "$rc" -eq 0 ] || girar-task rm "$id"
	exit $rc
}

trap '' HUP INT QUIT PIPE TERM
id="$(girar-task new "$repo")"
trap atexit EXIT

if [ -n "$deps" ]; then
	girar-task deps "$id" set $(printf %s "$deps" |tr , ' ')
fi

dry_run=
add_subtasks "$@"

set -- $fail_mode $test_mode
[ -z "$task_msg" ] ||
	set -- "$@" -m "$task_msg"
girar-task run "$@" "$id"
