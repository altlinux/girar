#!/bin/sh -efu

. girar-sh-functions

[ -n "${GIRAR_USER-}" ] ||
	fatal 'GIRAR_USER undefined'

. shell-args

PROG=build

show_help()
{
cat <<EOF
$PROG - create a task, add subtasks, and queue for build.

Usage: $PROG [options] <build_source_1> <build_name_1> ...

where each \`<build_source_N> <build_name_N>' pair is
either \`<gear_repo> <gear_tag>' or \`srpm <srpm_file>'
or \`rebuild <package_name>' or \`del <package_name>'
or \`copy <package_name>'.

Options:
  -b <binary_repository_name>     set a target binary package repository;
  --deps <deps>   set a comma-separated list of required task id numbers;
  --test-only     stop building task after tests, do not commit;
  --help          show this text and exit.
EOF
	exit
}

TEMP="$(getopt -n "$PROG" -o b: -l deps:,test-only,help -- "$@")" ||
	show_usage
eval set -- "$TEMP"

deps=
repo=
test_only=
while :; do
	case "$1" in
		--) shift; break ;;
		-b) shift; repo="$1" ;;
		--deps) shift; deps="$1" ;;
		--test-only) test_only="$1" ;;
		--help) show_help ;;
		*) show_usage "unrecognized option: $1" ;;
	esac
	shift
done

[ $# -ge 2 ] ||
	show_usage 'not enough arguments'

[ "$(($#%2))" -eq 0 ] ||
	show_usage 'odd number of arguments'

atexit()
{
	local rc=$?
	trap - EXIT
	[ "$rc" -eq 0 ] || girar-task rm "$id"
	exit $rc
}

trap '' HUP INT QUIT PIPE TERM
id="$(girar-task new "$repo")"
trap atexit EXIT

if [ -n "$deps" ]; then
	girar-task deps "$id" set $(printf %s "$deps" |tr , ' ')
fi

while [ $# -gt 0 ]; do
	dir="$1" tag="$2"
	shift 2
	case "$dir" in
		copy|del|rebuild|srpm) girar-task add "$id" "$dir" "$tag"
			;;
		*) girar-task add "$id" repo "$dir" "$tag"
			;;
	esac
done

girar-task run $test_only "$id"
