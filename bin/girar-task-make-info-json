#!/bin/sh -efu

. girar-sh-functions
PROG='girar-task-make-info-json'

id="$1"; shift
cd "$TASKS_DIR/$id"

. girar-sh-tmpdir

exec > "$tmpdir"/info.json

date_s="$(date +%s)"

printf '{\n'
printf ' "updated": %s,\n' "$date_s"
printf ' "taskid": %d,\n' "$id"
printf ' "shared": %s,\n' "$(find gears -maxdepth 0 -path gears -type d -perm -g=w \
	-printf true -or -printf false 2>/dev/null || echo false)"
printf ' "fail_early": %s,\n' "$(test -f task/fail-early && echo true || echo false)"
printf ' "test_only": %s,\n' "$(test -f task/test-only && echo true || echo false)"
if [ -f task/swift ]; then
	printf '"swift": true,\n'
fi
if [ -f task/abort ]; then
	aowner="$(stat -c %U task/abort)"
	aowner="${aowner#git_}"
	printf ' "aborted_by": "%s",\n' "$aowner"
fi
printf ' "repo": "%s",\n' "$(cat task/repo)"
printf ' "state": "%s",\n' "$(cat task/state)"
try="$(cat task/try 2>/dev/null ||:)"
[ -z "$try" ] || printf ' "try": %s,\n' "$try"
iter="$(cat task/iter 2>/dev/null ||:)"
[ -z "$iter" ] || printf ' "iter": %s,\n' "$iter"
if [ -f task/depends ]; then
	[ ! -s task/depends ] || {
		flock -s 0
		printf ' "depends": [%s],\n' "$(tr -s '[:space:]' , |sed 's/,$//')"
	} < task/depends
fi
printf ' "age": %s,\n' "$((($date_s-$(stat -c %Y task/state))/604800))"
log="logs/events.$try.$iter.log"
if [ -f "$log" ]; then
	printf ' "build_time": "%s",\n' \
		"$(LC_TIME=C date -r "$log" '+%FT%T')"
fi
if [ -s task/message ]; then
	printf ' "message": "%s",\n' \
		"$(tr -cd '[:print:]' < task/message | tr -s '[:space:]"' _)"
fi
printf ' "owner": "%s"' "$(cat task/owner)"

nums="$(gear_nums)"
if [ -n "$nums" ]; then
	printf ',\n'
	printf ' "subtasks": {\n'
	t=
	for i in $nums; do
		[ -z "$t" ] || printf ',\n'
		t=1
		printf '  "%s": {\n' "$i"
		if [ -s "gears/$i/dir" ]; then
			dir="$(cat "gears/$i/dir")"
			tag_name="$(cat "gears/$i/tag_name")"
			printf '   "dir": "%s",\n' "$dir"
			printf '   "tag_name": "%s",\n' "$tag_name"
			printf '   "tag_id": "%s",\n' "$(cat "gears/$i/tag_id")"
			printf '   "tag_author": "%s",\n' "$(tr -d '"' < "gears/$i/tag_author")"
			pkg_tar="gears/$i/pkg.tar"
			if [ -s "$pkg_tar" ]; then
				printf '   "fetched": "%s",\n' \
					"$(LC_TIME=C date -r "$pkg_tar" '+%FT%T')"
			fi
			printf '   "type": "repo",\n'
		elif [ -s "gears/$i/srpm" ]; then
			printf '   "srpm": "%s",\n' "$(cat "gears/$i/srpm")"
			if [ -s "gears/$i/rebuild_from" ]; then
				printf '   "rebuild_from": "%s",\n' "$(cat "gears/$i/rebuild_from")"
			fi
			printf '   "type": "srpm",\n'
		elif [ -s "gears/$i/package" ]; then
			if [ -s "gears/$i/copy_repo" ]; then
				printf '   "copy_repo": "%s",\n' "$(cat "gears/$i/copy_repo")"
				printf '   "type": "copy",\n'
			else
				printf '   "type": "delete",\n'
			fi
			package="$(cat "gears/$i/package")"
			printf '   "package": "%s",\n' "$package"
		fi
		if [ -d "acl/approved/$i" ]; then
			approved_by="$(find "acl/approved/$i" -mindepth 1 -maxdepth 1 -type f -printf '"%f",' |
					sed 's/,$//')"
			[ -z "$approved_by" ] ||
				printf '   "approved_by": [%s],\n' "$approved_by"
		fi
		if [ -d "acl/disapproved/$i" ]; then
			disapproved_by="$(find "acl/disapproved/$i" -mindepth 1 -maxdepth 1 -type f -printf '"%f",' |
					  sed 's/,$//')"
			[ -z "$disapproved_by" ] ||
				printf '   "disapproved_by": [%s],\n' "$disapproved_by"
		fi
		if [ -f "build/$i/pkgname" ]; then
			printf '   "pkgname": "%s",\n' "$(cat "build/$i/pkgname")"
		fi
		if [ -f "check-git-inheritance/$i" ]; then
			printf '   "relax_git_inheritance_check_for_commit": "%s",\n' \
				"$(cat "check-git-inheritance/$i")"
		fi
		printf '   "userid": "%s"\n' "$(cat "gears/$i/userid")"
		printf '  }'
	done
	printf '\n }'
fi
printf '\n}\n'

umask 002
cat "$tmpdir/info.json" > info.json
