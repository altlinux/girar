#!/bin/sh -efu

. girar-sh-functions
. shell-args

if [ "${1-}" = '--help' ]; then
        cat <<EOF
Usage: $PROG <binary repository name> <package> {add|del} [<login> [<start date> [<end date>]]]
   or: $PROG <binary repository name> # reads commands from stdin, one command per line
EOF
	exit 0
fi

repositories_file="$GIRAR_REPOSITORIES"
acl_dir="$GIRAR_ACL_CONF_DIR"
acl_state_dir="$GIRAR_ACL_STATE_DIR"

workdir=
cleanup()
{
	trap - EXIT
	[ -z "$workdir" ] || rm -rf -- "$workdir"
	exit "$@"
}

exit_handler()
{
	cleanup $?
}

signal_handler()
{
	cleanup 143
}

nqueued=0
# Format: <package> {add|del} [<login> [<start date> [<end date>]]]
parse_cmd()
{
	[ "$#" -ge 2 ] ||
		show_usage 'Not enough arguments.'

	local name="$1"; shift
	[ -n "${name##@*}" ] ||
		fatal "$name: Group is not allowed here"

	local action="$1"; shift
	case "$action" in
		add|del) ;;
		*) fatal "$1: Invalid action" ;;
	esac

	girar-check-acl-leader "$GIRAR_USER" "$name" \
		"$GIRAR_ACL_CONF_DIR/list.packages.$repository" \
		"$GIRAR_ACL_CONF_DIR/list.groups.$repository" >&2

	local login='*' start_time=0 end_time=0

	if [ "$#" -gt 0 ]; then
		login="$1"; shift
		[ -n "${login##@*}" ] ||
			fatal "$login: Group is not allowed here"
	fi

	if [ "$#" -gt 0 ]; then
		start_time="$1"; shift
	fi

	if [ "$#" -gt 0 ]; then
		end_time="$1"; shift
	fi

	if [ "$start_time" != 0 ]; then
		opt_check_number 'start-time' "$start_time"
	else
		start_time="$(date +'%s')"
	fi

	if [ "$end_time" != 0 ]; then
		opt_check_number 'end-time' "$end_time"

		[ "$start_time" -lt "$end_time" ] ||
			fatal "End time in the past"
	fi

	printf '%s\t%s\t%s\t%s\t%s\n' "$name" "$action" "$login" "$start_time" "$end_time"
	nqueued="$(($nqueued+1))"
}

[ -n "${GIRAR_USER-}" ] ||
	fatal "GIRAR_USER undefined"

[ "$#" -ge 1 ] ||
	show_usage 'Not enough arguments.'

repository="$1"
shift

# Abort if no non-empty repository list available.
[ -s "$repositories_file" ] ||
	fatal 'Sorry, list of available repositories is not available'

# Abort if requested binary repository is not listed.
fgrep -ixqse "$repository" "$repositories_file" ||
	fatal "Invalid repository \`$repository', valid repositories are: $(tr -s '\n' ' '<"$repositories_file")"

# Abort if acl spool dir for the repository is not available.
cd "$acl_state_dir/$repository"

trap exit_handler EXIT
trap signal_handler HUP PIPE INT QUIT TERM
workdir="$(mktemp -dt "$PROG.XXXXXXXX")" || exit 1

# If caller specified arguments, parse them,
# otherwise parse stdin line by line.
if [ $# -eq 0 ]; then
	while read -r line; do
		parse_cmd $line
	done
else
	parse_cmd "$@"
fi >"$workdir/cmd"
[ -s "$workdir/cmd" ] || exit 0

enable -f /usr/lib/bash/lockf lockf
builtin lockf -v "$acl_state_dir"

touch -- "$workdir/new"
[ ! -s "$GIRAR_USER.nmu" ] ||
	cat -- "$GIRAR_USER.nmu" >"$workdir/new"
cat -- "$workdir/cmd" >>"$workdir/new"
mv -f -- "$workdir/new" "$GIRAR_USER.nmu"

message "$nqueued command(s) queued"
