#!/bin/sh -efu

. girar-sh-functions
. shell-args

PROG='task ls'

valid_repo_list="$(list_indexed_repositories)"
valid_state_list='awaiting building committing done eperm failing failed new pending postponed swept tested'
notdone_state_list='awaiting building committing eperm failing failed new pending postponed swept tested'
queue_state_list='awaiting building committing failing pending postponed'

show_help()
{
	cat <<EOF
$PROG - list tasks

Usage: $PROG [options]

Options:
  --repo=LIST   comma-separated list of repositories to display;
  --state=LIST  comma-separated list of task states to display;
  --user=NAME   user name whose tasks to display;
  --needs-approval=WHO	list tasks that need specific approvals;
  -h, --help    show this text and exit.

Valid repository names are:
  $valid_repo_list, or ALL.
Default list of repositories is ALL.

Valid task state names are:
  $valid_state_list, or ALL.
Default list of task states is:
  for single user: $notdone_state_list;
  for --user=ALL: $queue_state_list.

Valid user name is
  any ${USER_PREFIX}* account name with "$USER_PREFIX" prefix stripped, or ALL.
Default user name is $GIRAR_USER.

Valid specific approvers are: maint tester

EOF
	exit
}

TEMP="$(getopt -n "$PROG" -o h -l all,brief,done,needs-approval:,repo:,state:,user:,help -- "$@")" ||
	show_usage
eval set -- "$TEMP"

repo=
GIRAR_TASK_LS_BRIEF=
GIRAR_TASK_LS_NEEDS_APPROVAL=
state=
user=
while :; do
	case "$1" in
		--) shift; break ;;
		--all) user=all ;;
		--brief) GIRAR_TASK_LS_BRIEF=1 ;;
		--done) state=done ;;
		--needs-approval) shift; GIRAR_TASK_LS_NEEDS_APPROVAL="$1" ;;
		--repo) shift; repo="$1" ;;
		--state) shift; state="$1" ;;
		--user) shift; user="$1" ;;
		-h|--help) show_help ;;
		*) fatal "unrecognized option: $1" ;;
	esac
	shift
done

[ "$#" -eq 0 ] || show_usage 'too many arguments.'

user="$(printf %s "$user" |tr '[:upper:]' '[:lower:]')"

repo="$(printf %s "$repo" |tr -s , ' ' |tr '[:upper:]' '[:lower:]')"
[ -z "$(printf %s "$repo" |tr -d '[:alnum:]. ')" ] ||
	show_usage 'invalid repository name'

case "$GIRAR_TASK_LS_NEEDS_APPROVAL" in
	ready|'') GIRAR_TASK_LS_CHECK_MODE= ;;
	maint|tester) GIRAR_TASK_LS_CHECK_MODE="--mode=needs-approval-by-$GIRAR_TASK_LS_NEEDS_APPROVAL" ;;
	*) fatal "unrecognized --needs-approval option: $GIRAR_TASK_LS_NEEDS_APPROVAL" ;;
esac

case "$repo" in
	''|all) repo="$valid_repo_list"
		;;
	*)	for r in $repo; do
			for v in $valid_repo_list; do
				[ "$v" = "$r" ] && break || continue
			done
			[ "$v" = "$r" ] ||
				show_usage 'invalid repository name'
		done
		;;
esac

state="$(printf %s "$state" |tr -s , ' ' |tr '[:upper:]' '[:lower:]')"
[ -z "$(printf %s "$state" |tr -d '[:alpha:] ')" ] ||
	show_usage 'invalid task state name'

if [ -n "$GIRAR_TASK_LS_NEEDS_APPROVAL" ]; then
	if [ -n "$state" ]; then
		if [ "$state" != eperm ]; then
			fatal "--needs-approval is not compatible with --state=$state"
		fi
	else
		state=eperm
	fi
fi

case "$state" in
	'')	if [ "$user" = all ]; then
			state="$queue_state_list"
		else
			state="$notdone_state_list"
		fi
		;;
	all)	if [ "$user" = all ]; then
			state="$notdone_state_list"
		else
			state="$valid_state_list"
		fi
		;;
	*)	for s in $state; do
			for v in $valid_state_list; do
				[ "$v" = "$s" ] && break || continue
			done
			[ "$v" = "$s" ] ||
				show_usage 'invalid task state name'
		done
		;;
esac

[ -n "$user" ] ||
	user="$GIRAR_USER"
printf %s "$user" |grep -Exqs "$USER_NAME_REGEXP" ||
	show_usage 'invalid user name'

case "$user" in
	all)	ls_user=
		GIRAR_TASK_LS_USER=
		;;
	*)	[ -d "$PEOPLE_DIR/$user" ] ||
			fatal "user \"$user\" not found"
		ls_user="-user $USER_PREFIX$user"
		GIRAR_TASK_LS_USER="$user"
		;;
esac

cd "$TASKS_DIR"

ids="$(
	for r in $repo; do
		for s in $state; do
			find -L index/$r/$s -mindepth 1 -maxdepth 1 -name '[1-9]*' -type d $ls_user
		done
	done |
		sort -t/ -nr -k4,4)"

if [ -z "$ids" ]; then
	message 'no tasks found for the given criteria'
	exit
fi

export \
	GIRAR_TASK_LS_BRIEF \
	GIRAR_TASK_LS_CHECK_MODE \
	GIRAR_TASK_LS_NEEDS_APPROVAL \
	GIRAR_TASK_LS_USER \
	#

for id in $ids; do
	$0-id "$id" ||:
done
