#!/bin/sh -efu

. gb-sh-functions

arch="$1"; shift
arch_from=${arch##*-}
arch_to=${arch%%-*}

acomp=${GB_AREPO_COMPONENT_NAME:-classic}
topdir="$PWD"

. gb-sh-tmpdir
cd "$tmpdir"

# dump unmets, assuming that the only relevant $GB_TMP_REPO_DIR component is "classic"
cat > sources.list << EOF
rpm file:$GB_TMP_REPO_DIR $arch_to classic
rpm file:$GB_TMP_REPO_DIR noarch classic
rpm file:$GB_AREPO_DIR $arch $acomp
EOF
unmets ${GB_APT_CACHE_LIMIT:+-l $GB_APT_CACHE_LIMIT} -s sources.list > unmets

if [ ! -s unmets ]; then
	stamp_echo >&2 "[$arch] dependencies check OK"
	exit 0
fi

printf '\t%s: NEW unmet dependencies detected:\n' "$arch"
column -t -s $'\t' < unmets |
	sed 's/^/ /'

cut -f1 < unmets | cut -d'#' -f1 > unmets.bin
sed -i "s/^${arch_from}-//; s/\\.32bit\$//" unmets.bin
sort -u -o unmets.bin{,}

join -j 1 -o 2.5 unmets.bin "$topdir"/plan/next.bin > unmets.srpms
sort -u -o unmets.srpms{,}

sort -k3,3 "$topdir"/plan/next.src |
	join -1 1 -2 3 -o 2.1 unmets.srpms - > unmets.src
sort -u -o unmets.src{,}

join -v1 unmets.src "$topdir"/plan/add-src > unmets-new.src

> unmets.acl
while read -r src; do
	gb-x-girar acl-show "$GB_REPO_NAME" "$src" >> unmets.acl
	list_notifiable_pkg_acl_members "$src"
done < unmets-new.src >> "$topdir"/report/unmet-addressees
sort -u -o "$topdir"/report/unmet-addressees{,}

if [ -s unmets-new.src ]; then
	cat unmets-new.src >> "$topdir"/report/unmets-src
	sort -u -o "$topdir"/report/unmets-src{,}

	printf '\tACLs of affected packages (%s):\n' "$(wc -l < unmets-new.src)"
	join -t$'\t' -a1 unmets-new.src unmets.acl |
		column -t -s $'\t' |
		sed 's/^/ /'
fi

#stamp_echo >&2 "[$arch] dependencies check FAILED"
exit 1
