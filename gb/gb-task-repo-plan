#!/bin/sh -efu

. gb-sh-functions

fail_if_task_abort_requested

# Drop old plan if any.
find plan -type f -delete

fail()
{
	stamp_echo >&2 "$*"
	exit 1
}

# Make a plan for upgrade: assuming that all new packages go
# into the repo, find out the existing packages which should
# be replaced or removed.

. gb-sh-tmpdir

# output: src-F  src-P  src-I
for i in $(build_nums); do
	for arch in $GB_ARCH; do
		dir=build/$i/$arch/srpm
		[ -d "$dir" -o ! -s "build/$i/$arch/excluded" ] ||
			continue
		find $dir/ -mindepth 1 -maxdepth 1 \
			-name '*.src.rpm' -type f \
			-printf '%f\t%p\t'$i'\n' # filename pathname subtask
	done
done > $tmpdir/i-src

# sort by filename to filter out duplicates
sort -u -k1,1 -o $tmpdir/i-src{,}
cut -f2 $tmpdir/i-src > $tmpdir/i-src-P
sort -o $tmpdir/i-src-P{,}
# output: src-N  src-EVR  src-F
xargs -r rpmquery --qf "$qf_src" -p -- < $tmpdir/i-src-P > $tmpdir/new.src

# output: bin-F  bin-P  bin-I
for i in $(build_nums); do
	for arch in $GB_ARCH; do
		dir=build/$i/$arch/rpms
		[ -d "$dir" -o ! -s "build/$i/$arch/excluded" ] ||
			continue
		find $dir/ -mindepth 1 -maxdepth 1 \
			-name '*.rpm' -not -name '*.src.rpm' -type f \
			-printf '%f\t%p\t'$i'\n' # filename pathname subtask
	done
done > $tmpdir/i-bin

# sort by filename to filter out duplicates
sort -u -k1,1 -o $tmpdir/i-bin{,}
cut -f2 $tmpdir/i-bin > $tmpdir/i-bin-P
sort -o $tmpdir/i-bin-P{,}
# output: bin-N  bin-EVR  bin-A  bin-F  src-F
xargs -r rpmquery --qf "$qf_bin" -p -- < $tmpdir/i-bin-P > $tmpdir/new.bin

# output: src-N  src-I
for i in $(package_nums); do
	if [ ! -s gears/$i/copy_repo -a ! -s gears/$i/dir ]; then
		package="$(cat gears/$i/package)"
		printf '%s\t%s\n' "$package" "$i"
	fi
done > $tmpdir/del-src-N-I

cd "$tmpdir"

sort -u -o new.src{,}
sort -u -o new.bin{,}
sort -u -k1,1 -o del-src-N-I{,}

# output: old.src  old.bin  old
make_repo_table '' old

# Check that all source packages explicitly requested for deletion exist.
sort -k1,1 -o old.src{,}
join -v1 -o 1.1,1.2 del-src-N-I old.src > del.missing
if [ -s del.missing ]; then
	sed -n < del.missing >&2 \
		's/^\([^[:space:]]\+\)[[:space:]]\([^[:space:]]\+\)$/#\2: cannot delete source package "\1" because it does not exist/p'
	fail "FAILED to delete non-existent packages: $(cut -f1 del.missing)"
fi

# output: new.src  new.bin  new
mktable new

# Tuples are replaced
# output: src-N  src-EVR  src-F  bin-N  bin-EVR  bin-A  bin-F
O='1.1 1.2 1.3 1.4 1.5 1.6 1.7'

# 1) by explicit delete request
join -t$'\t' -o "$O" old del-src-N-I > rm-by-del
sort -u -o rm-by-del{,}

# 2) by explicit src-N match (src->bin+);
join -t$'\t' -o "$O" old new > rm-by-src
sort -u -o rm-by-src{,}

# 3) by implicit bin-N match (src<-bin).
sort -k4,4 -o old{,}
sort -k4,4 -o new{,}
join -t$'\t' -j4 -o "$O" old new > rm-by-bin
sort -u -o rm-by-bin{,}

# Some of implicit bin-N matches may also be explicit src-N matches
# or delete requests, figure out pure implicit bin matches.
comm -23 rm-by-bin rm-by-src > rm-by-bin-w-src
comm -23 rm-by-bin-w-src rm-by-del > rm-by-bin-only

# Implicit (src<-bin) match should be propagated to (src->bin+).
sort -u -o old{,}
sort -u -o rm-by-bin{,}
join -t$'\t' -o "$O" old rm-by-bin > rm-by-bin+

# Tuples that are going to be removed.
# output: src-N  src-EVR  src-F  bin-N  bin-EVR  bin-A  bin-F
sort -u rm-by-{del,src,bin+} > rm

# Save pairs: old src-N and their new non-matching src-F replacers.
sort -k4,4 -o rm-by-bin-only{,}
# join by bin-N, output: old_src-N  new_src-F
join -t$'\t' -j4 -o 1.1,2.3 rm-by-bin-only new > oldsrc2newsrpm
sort -u -o oldsrc2newsrpm{,}
sort -k2,2 -o oldsrc2newsrpm{,}
# join with i-src by src-F,
# output: old_src-N  new_src-F  new_src-I
join -t$'\t' -1 2 -2 1 -o 1.1,1.2,2.3 oldsrc2newsrpm i-src > oldsrc2newsrpm-i
# output: old_src-N  new_src-I
cut -f1,3 oldsrc2newsrpm-i > replace-src-N-I
# sort -u by old_src-N
sort -k1,1 -u -o replace-src-N-I{,}

# Implicit match can be wrong, so issue a warning.
while read -r N F I; do
	echo >&2 "warning: existing source package $N is going to be replaced with $F from subtask #$I"
done < oldsrc2newsrpm-i

# output: src-F  bin-A
cut -f3,6 new | sort -u > add-srpm2arch
# join with i-src by src-F,
# output: src-F  src-P  bin-A
join -t$'\t' -o 1.1,2.2,1.2 add-srpm2arch i-src > add-srpm2arch-i

# output: src-N  src-EVR  src-F
cut -f1-3 new | sort -u > add-src
# sort by src-F
sort -k3,3 -o add-src{,}
# join with i-src by src-F
# output: src-N  src-EVR  src-F  src-P  src-I
join -t$'\t' -1 3 -2 1 -o 1.1,1.2,1.3,2.2,2.3 add-src i-src > add-src-i

# output: bin-N  bin-EVR  bin-A  bin-F
cut -f4-7 new | sort -u > add-bin
# sort by bin-F
sort -k4,4 -o add-bin{,}
# join with i-bin by bin-F
# output: bin-N  bin-EVR  bin-A  bin-F  bin-P  bin-I
join -t$'\t' -1 4 -2 1 -o 1.1,1.2,1.3,1.4,2.2,2.3 add-bin i-bin > add-bin-i

# Check that no source packages explicitly requested for deletion
# have been built within this task.
sort -k1,1 -o add-src-i{,}
# output: del_src-N  del_src-I  new_src-I
join -o 1.1,1.2,2.5 del-src-N-I add-src-i > del.new
if [ -s del.new ]; then
	sed -n < del.new >&2 \
		's/^\([^[:space:]]\+\)[[:space:]]\([^[:space:]]\+\)[[:space:]]\([^[:space:]]\+\)$/#\2: cannot delete source package "\1" because it has been built in subtask #\3/p'
	fail "FAILED to delete just built packages: $(cut -f1 del.new)"
fi

### Prepare new repo lists to update old.src/old.bin

# prepare next.src by applying add-src and rm-src changes to old.src
# output: src-N  src-EVR  src-F
sort -u old.src add-src > old+add.src
# sort by src-F
sort -k3,3 -o old+add.src{,}
cut -f3 < rm | sort -u > rm.src
# join by src-F
join -t$'\t' -o 1.1,1.2,1.3 -v1 -1 3 -2 1 old+add.src rm.src > next.src

# prepare next.bin by applying add-bin and rm-bin changes to old.bin
# output: src-F  bin-N  bin-EVR  bin-A  bin-F
cut -f3-7 < new | sort -u > new-3-7
# Reorder columns to make src-F the last one.
join -t$'\t' -o 1.2,1.3,1.4,1.5,1.1 -v1 new-3-7 /dev/null > old+add.bin
rm new-3-7
# output: bin-N  bin-EVR  bin-A  bin-F  src-F
cat old.bin >> old+add.bin
sort -u -o old+add.bin{,}
# sort by bin-F
sort -k4,4 -o old+add.bin{,}
cut -f7 < rm | sort -u > rm.bin
# join by bin-F
join -t$'\t' -o 1.1,1.2,1.3,1.4,1.5 -v1 -1 4 -2 1 old+add.bin rm.bin > next.bin

# Guess what.  The plan is actually about moving some files around.
cd - > /dev/null

# output: src-N  src-EVR  src-F  bin-N  bin-EVR  bin-A  bin-F
cut -f1-7 < $tmpdir/new | sort -u > plan/add-src+bin
# output: src-N  src-EVR  src-F  src-P  src-I
sort -u $tmpdir/add-src-i > plan/add-src
# output: bin-N  bin-EVR  bin-A  bin-F  bin-P  bin-I
sort -u $tmpdir/add-bin-i > plan/add-bin
# output: src-F  src-P  bin-A
sort -u $tmpdir/add-srpm2arch-i > plan/add-srpm2arch
# output: old_src-N  new_src-F  new_src-I
sort -u $tmpdir/oldsrc2newsrpm-i > plan/oldsrc2newsrpm

# output: src-N  src-EVR  src-F  bin-N  bin-EVR  bin-A  bin-F
cut -f1-7 < $tmpdir/rm | sort -u > plan/rm-src+bin
# output: src-N  src-EVR  src-F
cut -f1-3 < $tmpdir/rm | sort -u > plan/rm-src
# output: src-F  bin-A
cut -f3,6 < $tmpdir/rm | sort -u > plan/rm-srpm2arch
# output: bin-N  bin-EVR  bin-A  bin-F
cut -f4-7 < $tmpdir/rm | sort -u > plan/rm-bin

# output: src-N  src-I
cat $tmpdir/del-src-N-I > plan/del-src-N-I

# output: src-N  src-EVR  src-F
sort -u "$tmpdir/next.src" > plan/next.src
if [ -s "$GB_REPO_DIR/files/list/src.list" ]; then
	diff -u "$GB_REPO_DIR/files/list/src.list" plan/next.src > plan/src.list.diff || :
fi
# output: bin-N  bin-EVR  bin-A  bin-F  src-F
sort -u "$tmpdir/next.bin" > plan/next.bin
if [ -s "$GB_REPO_DIR/files/list/bin.list" ]; then
	diff -u "$GB_REPO_DIR/files/list/bin.list" plan/next.bin > plan/bin.list.diff || :
fi

# figure out affected architectures
cut -f3 plan/{add,rm}-bin | sort -u > plan/change-arch

# do some consistency checks, just in case
[ -s plan/change-arch ] ||
	fail 'cowardly refusing to create an empty plan'

# Prepare $GB_REPO_ROOT/$GB_REPO_NAME/index/ update.
{
	# updated: N, EVR, I
	join -t$'\t' -o 1.1,1.2,1.5 plan/add-src plan/rm-src
	# added: N, EVR, I
	join -t$'\t' -v1 -o 1.1,1.2,1.5 plan/add-src plan/rm-src
	# replaced: N, -, I
	# deleted: N, -, I
	sed 's/\([^[:space:]]\+\)[[:space:]]\+\([^[:space:]]\+\)$/\1\t-\t\2/' \
		$tmpdir/replace-src-N-I plan/del-src-N-I
} > $tmpdir/rip-src
sort -k1,1 -u $tmpdir/rip-src > plan/rip-src

# diagnostics
n_add=$(cat plan/add-src | wc -l)
n_rm=$(cat plan/rm-src | wc -l)
n_all=$(cat plan/next.src | wc -l)
plan="src +$n_add -$n_rm =$n_all"

while read -r arch; do
	n_add=$(cut -f3 plan/add-bin | grep -Fx "$arch" | wc -l)
	n_rm=$(cut -f3 plan/rm-bin | grep -Fx "$arch" | wc -l)
	n_all=$(cut -f3 plan/next.bin | grep -Fx "$arch" | wc -l)

	plan="$plan, $arch +$n_add -$n_rm =$n_all"
done < plan/change-arch

stamp_echo >&2 "plan: $plan"
