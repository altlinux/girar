#!/bin/sh -efu

. gb-sh-functions

fail_if_task_abort_requested

# This check does not apply to noarch packages.
fgrep -qs -xv noarch plan/change-arch || exit 0

mkdir -pm2775 bad_elf_symbols

repo1="$GB_REPO_DIR"

# Reuse our temporary repo.
repo2="$GB_TMP_REPO_DIR"

. gb-sh-tmpdir

cached_arches=
for arch in $GB_ARCH; do
	grep -Fqsx $arch plan/change-arch ||
		continue # this task does not change $arch

	sha256sum < "$repo2/$arch/base/pkglist.classic.xz" > "$tmpdir/$arch.hash"
	if cmp -s "$tmpdir/$arch.hash" bad_elf_symbols/$arch.hash; then
		cached_arches="$cached_arches $arch"
		continue
	fi

	# Assume that the only component worth checking is "classic".
	bad_elf_symbols_dircmp.pl \
			{"$repo1","$repo2"}/$arch/RPMS.classic \
			> bad_elf_symbols/$arch.new 3> bad_elf_symbols/$arch.old ||
		echo $? >> "$tmpdir/FAIL" &
done
[ -z "$cached_arches" ] ||
	stamp_echo >&2 "[${cached_arches# }] no need to repeat ELF symbols check"

wait
if [ -s "$tmpdir/FAIL" ]; then
	if grep -Fqsx 12 "$tmpdir/FAIL"; then
		halt_build_queue
	fi
	stamp_echo >&2 "ELF symbols check FAILED"
	exit 1
fi

rc=0 text=OK checked_arches=

for arch in $GB_ARCH; do
	[ -s "$tmpdir/$arch.hash" ] ||
		continue
	if [ -s bad_elf_symbols/$arch.new ]; then
		echo "	$arch: NEW bad_elf_symbols detected:"
		cat bad_elf_symbols/$arch.new
		rc=1 text=FAILED
	fi >&2
	if [ -s bad_elf_symbols/$arch.old ]; then
		echo "	$arch: old bad_elf_symbols resolved:"
		cat bad_elf_symbols/$arch.old
	fi >&2
	mv -- "$tmpdir/$arch.hash" bad_elf_symbols/
	checked_arches="$checked_arches $arch"
done

if [ "$rc" = 1 ]; then
	# This list should include only proprietary binary drivers
	# and ELF files that are loaded by specialized linkers
	# and don't follow traditional rules.
	cat >allow-bad-p <<'EOF'
^fglrx_glx(-legacy)?-[[:digit:]][^[:space:]]+[[:space:]]+(/usr/lib(64)?/(X11/(fglrx/(lib(dri|glx)|fglrx-libglx)|modules/(drivers/fglrx_drv|amdxmm|glesx))|libatiadlxx)\.so|/usr/lib/libAMDXvBA\.so\.1\.0)[[:space:]]
^nvidia_glx_[[:digit:]][^[:space:]]+[[:space:]]+/usr/lib(64)?/nvidia_[[:digit:]][^[:space:]/]+/[^[:space:]/]+\.so[[:space:]]
^xorg-drv-nvidia-[[:digit:]][^[:space:]]+[[:space:]]+/usr/lib(64)?/X11/(libglx-nvidia|modules/drivers/nvidia_drv)\.so[[:space:]]
^citrix-client-[[:digit:]][^[:space:]]+[[:space:]]+/usr/lib/ICAClient/((VDHSSPI|VDMM)\.DLL|(libctxssl|lib/libkcph)\.so)[[:space:]]
^golang-shared-[[:digit:]][^[:space:]]+[[:space:]]+/usr/lib(64)?/golang/pkg/linux_[^[:space:]/]+_dynlink/libstd\.so[[:space:]]+U[[:space:]]+main\.init[[:space:]]*$
^ocaml-[^[:space:]]+[[:space:]]+/usr/lib(64)?/ocaml/[^[:space:]]+\.cmxs[[:space:]]+U[[:space:]]+caml[A-Z]
EOF
	too_bad=
	for arch in $GB_ARCH; do
		# Bad symbols which are not part of allow-bad-p?
		if egrep -qs -v -f allow-bad-p -- bad_elf_symbols/$arch.new; then
			too_bad=1
			break
		fi
	done
	if [ -z "$too_bad" ]; then
		# Only bad symbols which are part of allow-bad-p.
		rc=0 text=COND-OK
	fi
fi

stamp_echo >&2 "[${checked_arches# }] ELF symbols check $text"
exit $rc
