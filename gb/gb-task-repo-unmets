#!/bin/sh -efu

. gb-sh-functions

fail_if_task_abort_requested

id="$(cat task/id)"
repo1="$GB_REPO_DIR"
repo2="$GB_TMP_REPO_DIR"
topdir="$PWD"

. gb-sh-tmpdir
cd "$tmpdir"

dump_unmets()
{
	local suff="${1-}"
	local orig_comps="$*"
	local age
	for age in old new; do
		for arch in $GB_ARCH; do
			[ $age = old ] && repo=$repo1 || repo=$repo2
			> $arch-$suff-unmets.$age
			local comps=
			local noarch_comps=
			local c
			for c in $orig_comps; do
				if [ -f "$repo/$arch/base/release.$c" ]; then
					comps="$comps $c"
				fi
				if [ -f "$repo/noarch/base/release.$c" ]; then
					noarch_comps="$noarch_comps $c"
				fi
			done
			if [ -n "$orig_comps" ] && [ -z "$comps$noarch_comps" ]; then
				continue
			fi

			cat >$age-$arch-$suff-sources.list <<-EOF
				rpm file:$repo $arch classic $comps
				rpm file:$repo noarch classic $noarch_comps
			EOF
			setarch $arch >/dev/null 2>&1 && native_arch=1 || native_arch=
			${native_arch:+setarch $arch} \
			unmets -a $arch ${GB_APT_CACHE_LIMIT:+-l $GB_APT_CACHE_LIMIT} -s $age-$arch-$suff-sources.list >$arch-$suff-unmets.$age ||
				echo 1 >>FAIL &
		done
	done

	wait
	if [ -s FAIL ]; then
		task_failed "$id"
		exit 1
	fi
}

task_started "$id"

dump_unmets
dump_unmets checkinstall
dump_unmets debuginfo
dump_unmets gostcrypto debuginfo

rc=0
> unmets.stat
> unmets.bin
> unmets.acl

# compare unmets
for arch in $GB_ARCH; do
	> $arch-unmets.new
	> $arch-unmets.plus
	> $arch-unmets.minus
	for comp in '' checkinstall debuginfo gostcrypto; do
		cat $arch-$comp-unmets.new >> $arch-unmets.new
		comm -13 $arch-$comp-unmets.{old,new} >> $arch-unmets.plus
		comm -23 $arch-$comp-unmets.{old,new} >> $arch-unmets.minus
	done
	sort -u -o $arch-unmets.plus{,}
	sort -u -o $arch-unmets.minus{,}
	if [ -s $arch-unmets.plus ]; then
		printf '\t%s: NEW unmet dependencies detected:\n' "$arch"
		column -t -s $'\t' < $arch-unmets.plus |
			sed 's/^/ /'
		cut -f1 < $arch-unmets.plus | cut -d'#' -f1 >> unmets.bin

		case " $GB_ALLOW_UNMETS_ARCH " in
			*" $arch "*) stamp_echo >&2 "[$arch] dependencies check IGNORED" ;;
			*) rc=1 ;;
		esac
	fi >&2
	if [ -s $arch-unmets.minus ]; then
		printf '\t%s: old unmet dependencies resolved:\n' "$arch"
		column -t -s $'\t' < $arch-unmets.minus |
			sed 's/^/ /'
	fi >&2
	if [ -s $arch-unmets.plus -o -s $arch-unmets.minus ]; then
		sort -u -o $arch-unmets.new{,}
		if [ -s unmets.stat ]; then
			printf >> unmets.stat ,
		fi
		printf >> unmets.stat ' %s +%s -%s =%s' \
			"$arch" "$(wc -l < $arch-unmets.plus)" \
			"$(wc -l < $arch-unmets.minus)" \
			"$(wc -l < $arch-unmets.new)"
	fi
done

sort -u -o unmets.bin{,}
join -j 1 -o 2.5 unmets.bin "$topdir"/plan/next.bin > unmets.srpms
sort -u -o unmets.srpms{,}
sort -k3,3 "$topdir"/plan/next.src |
	join -1 1 -2 3 -o 2.1 unmets.srpms - > unmets-src
sort -u -o unmets-src{,}
mv unmets-src "$topdir"/report/

while read -r src; do
	list_notifiable_pkg_acl_members "$src"
done < "$topdir"/report/unmets-src > "$topdir"/report/unmet-addressees
sort -u -o "$topdir"/report/unmet-addressees{,}

if [ -s "$topdir"/report/unmets-src ]; then
	while read -r src; do
		gb-x-girar acl-show "$GB_REPO_NAME" "$src"
	done < "$topdir"/report/unmets-src > unmets.acl
	printf '\tACLs of affected packages (%s):\n' \
		"$(wc -l < "$topdir"/report/unmets-src)"
	join -t$'\t' -a1 "$topdir"/report/unmets-src unmets.acl |
		column -t -s $'\t' |
		sed 's/^./ &/'
fi

if [ -s unmets.stat ]; then
	stamp_echo >&2 "unmets:$(cat unmets.stat)"
fi

if [ "$rc" = 0 ]; then
	text=OK
	task_processed "$id"
else
	text=FAILED
	task_failed "$id"
fi

stamp_echo >&2 "dependencies check $text"
exit $rc
