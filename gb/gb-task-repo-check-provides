#!/bin/sh -efu

set -o pipefail

. gb-sh-functions

fail_if_task_abort_requested

. gb-sh-tmpdir

# output format: name provides
dump_prov_arch()
{
	local repo arch name prov qf
	repo="$1"; shift
	arch="$1"; shift

	if [ "${GB_CHECK_DUPLICATE_PROVIDES-}" = 'new-only' ]; then
		name='%{NAME}'
	else
		name='%{NAME}-%{VERSION}-%{RELEASE}%|DISTTAG?{:%{DISTTAG}}|'
	fi
	prov='%|PROVIDEFLAGS?{%{PROVIDEFLAGS:depflags} %{PROVIDEVERSION}}:{}|'
	qf="[%{PROVIDENAME} $name $prov\n]"

	{
		local re_1 re_3
		# one subexpression
		re_1='(perl|pkgconfig)\([^ ]+'
		# three subexpressions
		re_3='((gir|python[^( ]*|typelib|vapi)\([^ ]+)|\/usr\/bin\/(jar|jjs|xvt)[^ ]*'
		gb-x-query-base "$repo/$arch" base.bloat "$qf" "$@" |
			sed -rn -e 's/ +$//' \
				-e 's/^(lib[^ ]+) ([^ ]+) = set:.*/\2\t\1/p' \
				-e 's/^('"$re_1"') ([^ ]+).*/\3\t\1/p' \
				-e 's/^('"$re_3"') ([^ ]+)(.*)/\5\t\1\6/p' \
				-e 's/^(\/[^ ]*) ([^ ]+)( [^ :] +[^ :]+$)/\2\t\1\3/p' \
				#
		# output format: $name \t PROVIDENAME $prov
	} </
}

dump_prov_noarch()
{
	local repo arch save
	repo="$1"; shift
	arch="$1"; shift
	save="${repo//\//_}_noarch_${*//\//_}"

	{
		flock 1
		[ -s "$save" ] ||
			dump_prov_arch "$repo" noarch "$@"
	} >> "$save"

	[ -c /dev/stdout ] ||
		cat < "$save"
}

dump_dups()
{
	{
		dump_prov_arch "$@"
		dump_prov_noarch "$@"
	} |
		sort -k2,2 |
		uniq -D -f1 |
		sort
}

check_arch=
if grep -Fqsx noarch plan/change-arch; then
	check_arch="$GB_ARCH" # a change in noarch affects all arches
else
	for arch in $GB_ARCH; do
		grep -Fqsx $arch plan/change-arch ||
			continue # this task does not change $arch

		check_arch="$check_arch $arch"
	done
fi

cd "$tmpdir"

# Dump noarch provides separately,
# they are going to be used by every arch in $check_arch.
{
	# Assume that the only component worth checking is "classic".
	for comp in classic; do
		dump_prov_noarch "$GB_REPO_DIR" "$comp"
		dump_prov_noarch "$GB_TMP_REPO_DIR" "$comp"
	done > /dev/null
	> "OK-noarch"
} &

for arch in $check_arch; do
	{
		# Assume that the only component worth checking is "classic".
		for comp in classic; do
			dump_dups "$GB_REPO_DIR" "$arch" "$comp" > "$arch-$comp.old"
			cat < "$arch-$comp.old" >> "$arch-old"
			dump_dups "$GB_TMP_REPO_DIR" "$arch" "$comp" > "$arch-$comp.new"
			cat < "$arch-$comp.new" >> "$arch-new"
			comm -13 "$arch-$comp.old" "$arch-$comp.new" >> "$arch-plus"
			comm -23 "$arch-$comp.old" "$arch-$comp.new" >> "$arch-minus"
			rm "$arch-$comp.old" "$arch-$comp.new"
		done
		sort -u -o "$arch-plus"{,}
		sort -u -o "$arch-minus"{,}
		> "OK-$arch"
	} &
done

wait

check_and_clear_OK_flags OK $check_arch noarch

touch plus munus new old
for arch in $check_arch; do
	if [ -s "$arch-plus" ]; then
		cut -f-2 < "$arch-plus" >> plus
		cut -f-2 < "$arch-new" >> new
	fi
	if [ -s "$arch-minus" ]; then
		cut -f-2 < "$arch-minus" >> minus
		cut -f-2 < "$arch-old" >> old
	fi
	if [ -s "$arch-plus" -o -s "$arch-minus" ]; then
		if [ -s stat ]; then
			printf ,
		fi
		printf ' %s +%s -%s =%s' \
			"$arch" "$(sort -u -k2,2 "$arch-plus" |wc -l)" \
			"$(sort -u -k2,2 "$arch-minus" |wc -l)" \
			"$(sort -u -k2,2 "$arch-new" |wc -l)"
	fi >> stat
done

strip_vrd()
{
	if [ "${GB_CHECK_DUPLICATE_PROVIDES-}" = 'new-only' ]; then
		sed -n -r 's/^([^\t]+)\t([^[:space:]]+)/\1\t\2/p'
	else
		sed -n -r 's/^([^\t]+)\t([^[:space:]]+)(-[^-]+){2}/\1\t\2/p'
	fi
}

show_changes()
{
	local all changed what
	all="$1"; shift
	changed="$1"; shift
	what="$1"; shift

	sort -u -o "$all"{,}
	sort -t$'\t' -k2,2 -o "$all"{,}
	sort -u -o "$changed"{,}

	printf '\t%s\n' "$what"

	sort -t$'\t' -u -k2,2 < "$changed" |
		join -t$'\t' -12 -22 -o 2.2,2.1 - "$all" |
		strip_vrd |
		awk -F $'\t' '{if(a[$1]){a[$1]=a[$1]" "$2}else{a[$1]=$2}}END{for(e in a)printf("%s\t%s\n",e,a[e])}' |
		sort |
		column -s$'\t' -t --table-columns='Provide:,Providers:' |
		sed 's/^/ /'
}

if [ -s plus ]; then
	if is_check_failure_tolerated; then
		rc=0
		text=IGNORED
	else
		rc=1
		text=FAILED
	fi
	show_changes new plus 'NEW duplicate provides detected:' >&2
else
	rc=0
	text=OK
fi

if [ -s minus ]; then
	show_changes old minus 'old duplicate provides resolved:' >&2
fi

if [ -s stat ]; then
	stamp_echo >&2 "duplicate provides:$(cat stat); check $text"
else
	stamp_echo >&2 "duplicate provides check $text"
fi
exit $rc
