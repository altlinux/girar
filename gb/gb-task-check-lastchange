#!/bin/sh -efu
#
# When updating a package V1->V2, last changelog entry in V1
# must be present among changelog entries in V2.  This is how
# we can retain NMU and promote QA activity.
#

. gb-sh-functions

fail_if_task_abort_requested

. gb-sh-tmpdir

print_error()
{
	echo >&2 "error: #$I: $*"
	echo "#$I" >> $tmpdir/errors
}

print_warning()
{
	echo >&2 "warning: #$I: $*"
	echo "#$I" >> $tmpdir/warnings
}

changelog()
{
	rpmquery --qf '[%{CHANGELOGTIME:day}\t%{CHANGELOGNAME}\n]' -p "$1" |
	perl -pe 's/\t.*<(\S+)(?:\@| at )([\w-]+).*>[ \t]*/\t$1\@$2\t/' |
		sed -r 's/\.(S1|M[5-8]0[CPT]\.1)((\.[0-9]+)*)$/\2/' \
		# ignore %ubt branch suffix in changelogs
}

is_lastchange_inheritance_check_relaxed()
{
	local owner
	if cmp -s "check-lastchange-inheritance/.$I" "check-lastchange-inheritance/$I"; then
		owner="$(stat -c %U "check-lastchange-inheritance/$I")"
		owner="${owner#"$GB_USER_PREFIX"}"
		echo "relaxed by $owner"
		return 0
	elif [ -f "check-lastchange-inheritance/.$I" -a \
	       -f "check-lastchange-inheritance/$I" ]; then
		owner="$(stat -c %U "check-lastchange-inheritance/$I")"
		owner="${owner#"$GB_USER_PREFIX"}"
		echo "relaxation by $owner is not applicable"
	fi
	return 1
}

is_git_inherited()
{
	if cmp -s "check-git-inheritance/.$I" "check-git-inheritance/$I"; then
		return 1
	fi
	set_GIT_DIR "$GB_GEARS_DIR" "$N"
	local id
	id="$(git rev-parse --branches="[${GB_REPO_NAME:0:1}]${GB_REPO_NAME:1}" 2>/dev/null)" &&
	[ -n "$id" ] &&
	echo 'relaxed by git inheritance'
}

check()
{
	local I=$1; shift
	local N=$1; shift
	local EVR=$1; shift
	local lastchange

	TZ=UTC changelog "$1" >$tmpdir/c1
	TZ=UTC changelog "$2" >$tmpdir/c2
	lastchange=$(head -1 $tmpdir/c1)
	if grep -F -qs -x -e "${lastchange:?}" $tmpdir/c2; then
		return
	fi

	local lastchangex
	TZ=UTC24 changelog "$1" >$tmpdir/c1x
	lastchangex=$(head -1 $tmpdir/c1x)
	if grep -F -qs -x -e "${lastchangex:?}" $tmpdir/c2; then
		return
	fi
	TZ=UTC-24 changelog "$1" >$tmpdir/c1x
	lastchangex=$(head -1 $tmpdir/c1x)
	if grep -F -qs -x -e "${lastchangex:?}" $tmpdir/c2; then
		return
	fi
	# Last changelog entry generated by kernel-build-tools?
	if echo "${1##*/}" |grep -E -qs -x 'kernel-modules-.+\.[0-9]+\.[0-9]+\.src\.rpm'; then
		lastchange=$(head -2 $tmpdir/c1 |tail -1)
		if grep -F -qs -x -e "${lastchange:?}" $tmpdir/c2; then
			return
		fi
	fi

	(umask 002; mkdir -p check-lastchange-inheritance)
	(umask 077; echo "$EVR" > "check-lastchange-inheritance/.$I")

	local action
	if is_check_failure_tolerated ||
	   is_git_inherited ||
	   is_lastchange_inheritance_check_relaxed; then
		action=print_warning
	else
		action=print_error
	fi > $tmpdir/reason

	local reason=
	if [ -s $tmpdir/reason ]; then
		reason=" ($(cat $tmpdir/reason))"
	fi

	$action "${2##*/}: missing last changelog entry from ${1##*/}$reason:"
	echo >&2 "* $lastchange"
}

id="$(cat task/id)"
gb-x-girar hook-event task progress "$id" "${0##*/gb-}" "started" ||:

join -o 0,1.2,1.3,2.4,2.5 plan/{rm,add}-src >$tmpdir/N+EVR+F1+P+I
while read -r N EVR F1 P I; do
	check "$I" "$N" "$EVR" "$GB_REPO_DIR/files/SRPMS/$F1" "$P" </dev/null
done <$tmpdir/N+EVR+F1+P+I

rc=0
if [ -f $tmpdir/errors ]; then
	rc=1
	text="FAILED for: $(sort -t'#' -k2,2n $tmpdir/errors |tr -s '\n' ' ')"
	gb-x-girar hook-event task progress "$id" "${0##*/gb-}" "failed" ||:
elif [ -f $tmpdir/warnings ]; then
	text="COND-OK for: $(sort -t'#' -k2,2n $tmpdir/warnings |tr -s '\n' ' ')"
	gb-x-girar hook-event task progress "$id" "${0##*/gb-}" "processed" ||:
else
	text=OK
	gb-x-girar hook-event task progress "$id" "${0##*/gb-}" "processed" ||:
fi

stamp_echo >&2 "srpm inheritance check $text"
exit $rc
