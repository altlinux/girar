#!/bin/sh -efu

. gb-sh-functions
. shell-quote

i="$1"; shift

I="#$i"
Fatal()
{
	stamp_echo >&2 "$I: $*"
	exit 1
}

get_sig_uid()
{
	local userid
	userid="$(printf %s "$*" |
		sed -n 's/^[^<]\+<[[:space:]]*\([a-z][a-z0-9_-]\+\)\([[:space:]]*@\|[[:space:]]\+at[[:space:]]\+\).*$/\1/p' |
		tr '[:upper:]' '[:lower:]' |tr - _)"
	[ -n "$userid" ] ||
		Fatal "$*: unacceptable signature"
	printf %s "$userid"
}

srpm=
if [ -s "gears/$i/dir" ]; then
	dir="$(cat "gears/$i/dir")"
	I="$I: ${dir##*/} $(cat "gears/$i/tag_name")"
	tag_author="$(cat "gears/$i/tag_author")"
	userid="$(get_sig_uid "$tag_author")"
elif [ -s "gears/$i/srpm" ]; then
	srpm="$(cat "gears/$i/srpm")"
	I="$I: $srpm"
	tag_author="$(alt-rpmkeys-checksig "gears/$i/$srpm")"
	[ -n "$tag_author" ] ||
		Fatal 'gpg uid not found'
	userid="$(get_sig_uid "$tag_author")"
elif [ -s "gears/$i/copy_repo" -a -s "gears/$i/package" ]; then
	I="$I: $(cat "gears/$i/copy_repo") $(cat "gears/$i/package")"
else
	Fatal 'source not found'
fi

sid="$(cat "gears/$i/sid")" ||
	Fatal 'source id not found'

cd build/$i

check_srpms()
{
	local arch f found=
	for arch in $GB_ARCH; do
		[ -d "$arch/srpm" -o ! -s "$arch/excluded" ] || continue
		f="$(find "$arch/srpm/" -mindepth 1 -maxdepth 1 -name '*.src.rpm' -type f -printf '%f\n')"
		cd "$arch/srpm"
		if [ -z "$f" ]; then
			Fatal "no $arch source package"
		elif [ -f "$f" ]; then
			printf '%s\n' "$f"
			found=1
		else
			Fatal "multiple $arch source packages:" "$f"
		fi
		cd - >/dev/null
	done
	[ -n "$found" ] ||
		Fatal "no source package"
}

srpms=$(check_srpms)
srpmsu=$(echo "$srpms" |sort -u)
n=$(echo "$srpmsu" | wc -l)

[ "$n" -eq 1 ] ||
	Fatal 'different per-arch srpms:' "$srpms"
if [ -n "$srpm" ]; then
	[ "$srpm" = "$srpmsu" ] ||
		Fatal "source package \`$srpm' changed its name to \`$(echo "$srpms" |sort -u)' after build"
fi

check_brpms()
{
	local arch f found=
	for arch in $GB_ARCH; do
		[ -d "$arch/rpms" -o ! -s "$arch/excluded" ] || continue
		f="$(find "$arch/rpms/" -mindepth 1 -maxdepth 1 -name '*.rpm' -type f -printf '%f\n')"
		[ -n "$f" ] ||
			Fatal "no $arch binary package"
		found=1
	done
	[ -n "$found" ] ||
		Fatal 'no binary package'
}
check_brpms

. gb-sh-tmpdir

for r in $GB_REPO_NAME $GB_REPO_DOWN_NAME; do
	cd "$tmpdir"
	make_repo_table $r
	sort -k1,1 -o $r.src{,}
	sort -k1,1 -o $r.bin{,}
	cd - >/dev/null
done

check_release_name()
{
	local r="$1"; shift
	local s

	for s in $GB_REPO_REL_SUFF_MUST_NOT; do
		[ -n "${r##$s}" ] ||
			Fatal "release name $r contains $s suffix"
	done
	for s in $GB_REPO_REL_SUFF_MUST_HAVE; do
		[ -z "${r##$s}" ] ||
			Fatal "release name $r does not contain $s suffix"
	done
}

check_nevr()
{
	local t="$1"; shift
	local n="$1"; shift
	local evr="$1"; shift
	local a="$1"; shift
	local r evr0 a0

	for r in $GB_REPO_NAME $GB_REPO_DOWN_NAME; do
		printf '%s\t%s\n' "$n" "$evr" |
			join -t$'\t' -o '2.2,2.3' - "$tmpdir/$r.$t" |
			sort -u > "$tmpdir/evra"
		while read -r evr0 a0; do
			[ -z "$a" ] || [ "$a" = "$a0" ] ||
			[ "$a" = 'noarch' ] || [ "$a0" = 'noarch' ] ||
				continue
			if [ -z "$GB_ALLOW_SAME_NEVR" ]; then
				is_ver1_lt_ver2 "$evr0" "$evr" ||
					Fatal "${a:-$t} package \`$n' version \`$evr' is not greater than its version \`$evr0' in \`$r'"
			else
				is_ver1_le_ver2 "$evr0" "$evr" ||
					Fatal "${a:-$t} package \`$n' version \`$evr' is less than its version \`$evr0' in \`$r'"
			fi
		done < "$tmpdir/evra"
	done
}

check_spi_nevr()
{
	local n="$1"; shift
	local evr="$1"; shift
	local repo_dir spi dspi

	repo_dir="$GB_REPO_ROOT/$GB_REPO_NAME/index"
	spi="src/${n:0:1}/$n/d-t-s-evr.list"
	dspi="$repo_dir/$spi"
	[ -f "$dspi" ] ||
		return 0
	tac -- "$dspi" |uniq > "$tmpdir/dspi"

	local what tid evr0 dummy
	what="src package \`$n' version \`$evr' is less than its version"
	while read -r dummy tid dummy evr0 dummy; do
		[ "$evr0" != '-' ] ||
			continue
		is_ver1_le_ver2 "$evr0" "$evr" ||
			Fatal "$what \`$evr0' in $GB_REPO_NAME/task/archive/_$(($tid/1024))/$tid"
	done < "$tmpdir/dspi"
}

check_sid()
{
	local n="$1"; shift
	local evr="$1"; shift
	local sid="$1"; shift
	local repo_dir dir spi qevr what found_sid= error_missing= error_mismatch=

	[ -n "$sid" ] || return 0

	quote_sed_regexp_variable qevr "$evr"
	what="package \`$n' version \`$evr' was built earlier"
	spi="src/${n:0:1}/$n/d-t-s-evr.list"

	repo_dir="$GB_REPO_ROOT/$GB_REPO_NAME/index"
	for dir in $repo_dir $(set +f && ls -d -- $GB_REPO_ROOT/*/index |
				grep -Fxve "$repo_dir"); do
		local dspi
		dspi="$dir/$spi"
		[ -f "$dspi" ] || continue
		local repo_name
		repo_name="${dir%/*}"
		repo_name="${repo_name##*/}"

		local index_sid found_sid_in_target_repo=
		for index_sid in \
		    $(sed -rn 's/^([^[:space:]]+[[:space:]]){3}'"$qevr"'([[:space:]]([^[:space:]]+))?$/:\3/p' \
		      "$dspi" |uniq); do
			case "$index_sid" in
				:)	error_missing=1
					stamp_echo >&2 "$I: $what for $repo_name but no source id was recorded"
					;;
				:$sid)	found_sid=1
					if [ "$dir" = "$repo_dir" ]; then
						found_sid_in_target_repo=1
					fi
					;;
				*)	error_mismatch=1
					stamp_echo >&2 "$I: $what for $repo_name from a different source: \`${index_sid#:}'"
					;;
			esac
		done
		[ -z "$found_sid_in_target_repo" ] ||
			break
	done

	[ -z "$found_sid" ] ||
		error_missing=
	[ -z "$error_mismatch$error_missing" ] ||
		Fatal "source id check FAILED"
}

for arch in $GB_ARCH; do
	for d in $arch/srpm $arch/rpms; do
		if [ ! -d "$d" -a -s "$arch/excluded" ]; then
			continue
		fi
		sisyphus_check ${GB_TRUST_GPG_NAMES:+--trust-gpg-names="$GB_TRUST_GPG_NAMES"} "$d" && continue
		if is_check_failure_tolerated; then
			echo >&2 "$I: the most essential build check failed, but \`$GB_REPO_NAME' is so neglected a repository that nobody cares about such trifles as this."
			stamp_echo >&2 "$I: sisyphus_check COND-OK"
		else
			Fatal 'sisyphus_check FAILED'
		fi
	done

	# check changelog name
	find "$arch/" -type f -name '*.rpm' -execdir gb-x-check-rpm-changelogname "$userid" '{}' '+' ||
		Fatal 'changelog name check FAILED'

	# check release names
	if [ -d "$arch/srpm" -o ! -s "$arch/excluded" ]; then
		qsrc "$arch/srpm/" >> "$tmpdir/check.src"
		qbin "$arch/rpms/" > "$tmpdir/new.bin"
		while read -r N EVR A F src_F; do
			printf '%s\t%s\t%s\n' "$N" "$EVR" "$arch"
		done < "$tmpdir/new.bin" >> "$tmpdir/check.bin"
	fi
done

# check release names of src packages
sort -u -o "$tmpdir"/check.src{,}
while read -r N EVR F; do {
	check_release_name "${EVR##*-}"
	check_nevr src "$N" "$EVR" ''
	check_spi_nevr "$N" "$EVR"
	check_sid "$N" "$EVR" "$sid"
} < /dev/null; done < "$tmpdir/check.src"

# check release names of bin packages
sort -u -o "$tmpdir"/check.bin{,}
while read -r N EVR A; do {
	check_release_name "${EVR##*-}"
	check_nevr bin "$N" "$EVR" "$A"
} < /dev/null; done < "$tmpdir/check.bin"

for arch in $GB_ARCH; do
	[ -d "$arch/srpm" -o ! -s "$arch/excluded" ] || continue
	f="$arch/srpm/$srpmsu"
	[ -f "$f" ] || continue
	built_pkgname="$(rpmquery --qf '%{name}' -p -- "$f")"
	echo "$built_pkgname" > pkgname
	break
done

stamp_echo >&2 "$I: build check OK"
