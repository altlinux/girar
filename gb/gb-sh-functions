#!/bin/sh

. gb-x-sh-functions

. gb-sh-conf

expected_task_version='8309eff132884a47e73669636e10b6222b94190e'

userid_nums()
{
	find gears -mindepth 2 -maxdepth 2 -path 'gears/[1-7]*/userid' -type f 2>/dev/null |
		cut -d/ -f2 |sort -n
}

gear_nums()
{
	find gears -mindepth 2 -maxdepth 2 -path 'gears/[1-7]*/dir' -type f 2>/dev/null |
		cut -d/ -f2 |sort -n
}

src_nums()
{
	find gears -mindepth 2 -maxdepth 2 \( -path 'gears/[1-7]*/dir' -or -path 'gears/[1-7]*/srpm' \) -type f 2>/dev/null |
		cut -d/ -f2 |sort -n
}

package_nums()
{
	find gears -mindepth 2 -maxdepth 2 -path 'gears/[1-7]*/package' -type f 2>/dev/null |
		cut -d/ -f2 |sort -n
}

copy_nums()
{
	find gears -mindepth 2 -maxdepth 2 -path 'gears/[1-7]*/copy_repo' -type f 2>/dev/null |
		cut -d/ -f2 |sort -n
}

build_nums()
{
	find build -mindepth 3 -maxdepth 3 \( -path 'build/[1-7]*/*/srpm' -or -path 'build/[1-7]*/*/rpms' \) -type d 2>/dev/null |
		cut -d/ -f2 |sort -nu
}

# Now what's the plan?  I guess we don't just move some files around.
# We deal with "tuples" (src,bin+).  Therefore, the consistent plan is
# to group files into such tuples, and decide how new tuples replace
# the existing tuples.
#
# Thus we have to assume that the repo is consistent: both src->bin+
# and bin->src mappings must exist for every package in the repo.  Stale
# packages cannot be handled by the plan consistently, and removing them
# is someone else's job.
#
# Tuples are represented with the following table:
#
# src-N  src-EVR  src-F  bin-N  bin-EVR  bin-A  bin-F
# -----  -------  -----  -----  -------  -----  -----
#
# Note: the fact that both mappings mentioned above exist roughly means
# that we can join src+bin on %{SOURCERPM}.  This is how we do the table.

mktable()
{
	local x="$1"; shift
	# sort by src-F field
	sort -k3 -o "$x.src"{,}
	sort -k5 -o "$x.bin"{,}
	# join by src-F field
	join -t$'\t' -13 -25 -o '1.1 1.2 1.3 2.1 2.2 2.3 2.4' -- "$x".{src,bin} >"$x"
	sort -u -o "$x"{,}
}

make_repo_table()
{
	local repo="${1-}"
	[ -n "$repo" ] || repo="$GB_REPO_NAME"

	local out="${2:-$repo}"

	if [ -s "$out" ]; then
		return 0
	fi

	local repo_dir
	if [ "$repo" = "$GB_REPO_NAME" ]; then
		repo_dir="$GB_REPO_DIR"
	else
		repo_dir="$GB_REPO_ROOT/$repo/release/latest"
	fi

	local arch
	if [ -s "$repo_dir/files/list/src.list" ]; then
		sort -u "$repo_dir/files/list/src.list" >"$out.src"
	elif [ -s "$repo_dir/files/list/src.list.xz" ]; then
		xzcat "$repo_dir/files/list/src.list.xz" >"$out.src"
		sort -u -o "$out.src"{,}
	else
		qsrc "$repo_dir"/files/SRPMS/ >"$out.src"
		sort -u -o "$out.src"{,}
	fi

	if [ -s "$repo_dir/files/list/bin.list" ]; then
		sort -u "$repo_dir/files/list/bin.list" >"$out.bin"
	elif [ -s "$repo_dir/files/list/bin.list.xz" ]; then
		xzcat "$repo_dir/files/list/bin.list.xz" >"$out.bin"
		sort -u -o "$out.bin"{,}
	else
		for arch in $GB_ARCH noarch; do
			qbin "$repo_dir"/files/$arch/RPMS/
		done >"$out.bin"
		sort -u -o "$out.bin"{,}
	fi

	mktable "$out"
}

halt_build_queue()
{
	echo "${0##*/} failed in $PWD" >>"$GB_STOP_FILE"
	stamp_echo >&2 '*** BUILD QUEUE HALTED ***'
	return 1
}

exit_if_stopped_by_global_cutout_switches()
{
	[ ! -f STOP ] || exit 0
	[ ! -f "$GB_STOP_FILE" ] || exit 0
}

task_change_state_to_failing()
{
	gb-x-girar task-change-state "$(cat task/id)" FAILING
	if [ -f task/fail-early -a ! -f task/abort ]; then
		touch task/abort
		stamp_echo >&2 "${1:+$1 }requesting cancellation of task processing"
	fi
}

maybe_cancel()
{
	if [ -f task/abort ]; then
		task_change_state_to_failing
		return 0
	fi
	return 1
}

fail_if_task_abort_requested()
{
	if maybe_cancel; then
		stamp_echo >&2 "${1:+$1 }task processing CANCELLED"
		exit 1
	fi
}

is_check_failure_tolerated()
{
	local n
	for n in ${GB_LIST_OF_CHECKS_ALLOWED_TO_FAIL-}; do
		[ "${0##*/}" = "$n" ] || continue
		return 0
	done
	return 1
}

list_notifiable_pkg_acl_members()
{
	local n="$1"; shift

	gb-x-girar acl-show "$GB_REPO_NAME" "$n" |
		cut -f2- |
		tr ' ' '\n' |
		egrep -vx '@(nobody|everybody|qa)' |
		cat
}
