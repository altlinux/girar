#!/bin/sh -efu

# Toplevel cron select-task/run-task runner.

GB_REPO_NAME="$1"; shift
export GB_REPO_NAME

# Ensure that only one instance is running for the given repo.
lockdir="$HOME/.lockdir/$GB_REPO_NAME"
mkdir -p "$lockdir"
exec < "$lockdir"
flock -n 0 || exit 0
exec >> "$lockdir/log" 2>&1

# Set cwd to directory with scripts and configs.
GB_HOME="${0%/*}"
[ "$GB_HOME" != "$0" ]
cd "$GB_HOME"
export GB_HOME

# Add path to scripts to $PATH.
PATH="$PWD:$PATH"

. gb-sh-functions

pid=
while :; do
	exit_if_stopped_by_global_cutout_switches

	if [ -z "$pid" ]; then
		inotifywait -q -t 60 -e create "$GB_TASKS_DIR/index/$GB_REPO_NAME/pending" &
		pid=$!
		stamp_echo "forked $pid"
	fi

	min_iter="$(gb-y-calc-max-iter BUILDING PENDING)" ||
		min_iter=0
	{
		# Abuse our queue dir to signal that we are busy
		# (and might have some work done soon).
		flock 0

		while :; do
			exit_if_stopped_by_global_cutout_switches

			stamp_echo "selecting min_iter=$min_iter"
			id="$(gb-y-select-task PENDING COMMITTING "$min_iter")" ||
				id=
			[ -n "$id" ] || break
			stamp_echo "task $id"
			gb-commit-task "$id"
		done
	} < "$GB_TASKS_DIR/index/$GB_REPO_NAME/pending"

	stamp_echo waiting

	# Give gb-toplevel-build a chance to start building tasks
	# with iter >= $min_iter, before we recalculate min_iter.
	# (We might have just put such a task into awaiting state,
	# and if we continue, we might worsen the situation for it
	# by committing a task with a lesser iter after recalculating min_iter.)
	sleep 2

	wait $pid ||
	{
		[ $? -eq 2 ] || exit
		stamp_echo timeout
	}
	pid=
done < /dev/null
