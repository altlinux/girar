#!/bin/sh -efu

. gb-sh-functions

prev_repo_dir="$(readlink -ev -- "$GB_REPO_DIR")"
task_id=$(cat task/id)
next_repo_dir="$GB_REPO_ROOT/$GB_REPO_NAME/release/$task_id"

if [ -d "$next_repo_dir" ]; then
	stamp_echo >&2 "$next_repo_dir already exists!"
	exit 1
fi
cp -al -- "$prev_repo_dir" "$next_repo_dir"
stamp_echo >&2 'repo clone OK'

GB_REPO_DIR="$next_repo_dir"
export GB_REPO_DIR

gb-y-task-commit-packages "$GB_REPO_DIR" > logs/commit.log
stamp_echo >&2 'packages update OK'

# Update lists.
install -pm644 -- plan/next.src "$GB_REPO_DIR/files/list/src.list"
install -pm644 -- plan/next.bin "$GB_REPO_DIR/files/list/bin.list"
install -pm644 -- plan/next.src.xz "$GB_REPO_DIR/files/list/src.list.xz"
install -pm644 -- plan/next.bin.xz "$GB_REPO_DIR/files/list/bin.list.xz"

# Reuse base directories from our prepared repo.
updated=
for arch in $GB_ARCH noarch; do
	repo_base="$GB_REPO_DIR/$arch/base"
	next_base="build/repo/$arch/base.next"
	mandatory_comps='classic'
	optional_comps='checkinstall debuginfo gostcrypto'
	for comp in $optional_comps; do
		cmp_file=pkglist.$comp.xz
		if [ -f "$repo_base/$cmp_file" ] ||
		   [ -f "$next_base/$cmp_file" ]; then
			mandatory_comps="$mandatory_comps $comp"
		fi
	done
	skip=1
	for comp in $mandatory_comps; do
		cmp_file=pkglist.$comp.xz
		# If $cmp_file has changed,
		# the update cannot be skipped for this $arch.
		cmp -s "$repo_base/$cmp_file" "$next_base/$cmp_file" || {
			skip=
			break
		}
	done
	if [ -n "$skip" ]; then
		continue
	fi
	# NB: no --delete here, contents_index might be optimized out.
	rsync -rlt "$next_base"/ "$repo_base"/
	updated="$updated $arch"
done

stamp_echo >&2 "[${updated## }] update OK"

gb-task-commit-arepo
gb-task-commit-repo-hash

task_info="$GB_REPO_DIR/files/list/task.info"
rm -f -- "$task_info"
cat > "$task_info" <<EOF
task $task_id
prev ${prev_repo_dir##*/}
EOF

stamp_echo >&2 'repo update OK'

reposited="$(gb-y-reposit-task "$GB_REPO_NAME" "$task_id")"
expected="$(readlink -ev -- "$GB_REPO_ROOT/$GB_REPO_NAME/task/$task_id")"
if [ "$reposited" != "$expected" ]; then
	stamp_echo >&2 "expected $expected, reposited $reposited!"
	exit 1
fi

chmod u+w -- "$next_repo_dir"
rm -rf -- "$next_repo_dir"

latest="$GB_REPO_ROOT/$GB_REPO_NAME/release/latest"
ln -snf -- "../task/$task_id" "$latest.$task_id"
readlink -ev -- "$latest.$task_id" > /dev/null
mv -fT -- "$latest.$task_id" "$latest"

stamp_echo >&2 'repo save OK'
