#!/bin/sh -efu

. shell-quote

arch="$1" i="$2"; shift 2

. gb-sh-functions
. gb-sh-tmpdir

fail_if_task_abort_requested "[$arch]"

userid="$(cat gears/$i/userid)"
if [ -s "gears/$i/dir" ]; then
	dir="$(cat "gears/$i/dir")"
	from="${dir##*/}"
	src=pkg.tar
	tag_name="$(cat "gears/$i/tag_name")"
	tag_author="$(cat "gears/$i/tag_author")"
	I="[$arch] #$i $from $tag_name:"
elif [ -s "gears/$i/srpm" ]; then
	from="$(cat "gears/$i/srpm")"
	src="$from"
	tag_name=
	if [ -s "gears/$i/tag_author" ]; then
		tag_author="$(cat "gears/$i/tag_author")"
	else
		tag_author=
	fi
	I="[$arch] #$i $src:"
else
	stamp_echo >&2 "#$i: source not found"
	exit 1
fi

dist="$(cat task/repo)"
task_id="$(cat task/id)"
task_try="$(cat task/try)"
task_iter="$(cat task/iter)"

stamp_echo >&2 "$I build start"

# copy source package and accompanying build data to remote side
gb-x-rsync-loop -q -- "gears/$i/$src" "$remote_host:in/"
(umask 002; mkdir -p "build/$i/$arch") || false
[ -f "build/$i/$arch/log" ] ||
	touch "build/$i/$arch/log"
gb-x-rsync-loop -qrlt --delete --exclude='*.signed' -- "build/$i/$arch/" "$remote_host:build/"

swift=
if [ -f task/swift -o -s task/trusted_swift ] &&
   [ -s "build/$i/$arch/chroot_base" -a -f "build/$i/$arch/chroot_BR" ] &&
   [ -n "$(set +f && ls "build/$i/$arch/srpm"/*.src.rpm 2>/dev/null)" ]; then
	swift=swift
fi

save_build_try_iter()
{
	printf %s "$task_try.$task_iter" > "build/$i/$arch/try_iter"
}

rm -f "build/$i/$arch/try_iter"

# run the build on remote side
gb-x-ssh "$remote_host" ./gb-remote-build \
	"\"$(quote_shell "$arch")\"" \
	"\"$(quote_shell "$from")\"" \
	"\"$(quote_shell "$tag_name")\"" \
	"\"$(quote_shell "$tag_author")\"" \
	"\"$(quote_shell "$dist")\"" \
	"\"$(quote_shell "$task_id")\"" \
	"\"$(quote_shell "$i")\"" \
	"\"$(quote_shell "$task_try")\"" \
	"\"$(quote_shell "$task_iter")\"" \
	$swift || {
	stamp_echo >&2 "$I build FAILED"
	gb-x-rsync-loop -q -- "$remote_host:build/*log" "build/$i/$arch/"
	task_change_state_to_failing "[$arch]"
	exit 1
}

# copy build result from remote side
gb-x-rsync-loop -qrlt --delete --exclude='*.signed' -- "$remote_host:build/" "build/$i/$arch/"
find "build/$i/$arch/" -type d -print0 |
	xargs -r0 chmod 775 --

if [ -s "build/$i/$arch/excluded" ]; then
	save_build_try_iter
	stamp_echo >&2 "$I build SKIPPED"
	exit 0
fi

# copy some build warnings from the build log to the task log
grep -EHs 'WARNING: [^ ]+ is not yet (set-versioned|debuginfo-enabled)' "build/$i/$arch/log" ||:

if [ -n "$swift" ]; then
	save_build_try_iter
	stamp_echo >&2 "$I build swiftly SKIPPED"
	exit 0
fi

rpmsign()
{
	local dir="$1" out; shift

	find "build/$i/$arch/$dir/" -mindepth 1 -maxdepth 1 -type f -name '*.rpm' \
		-execdir rpmquery --qf '%{sha1header}\n' -p '{}' '+' > $tmpdir/$dir-hash
	sort -o $tmpdir/$dir-hash{,}

	if cmp -s "build/$i/$arch"/$dir.signed $tmpdir/$dir-hash; then
		return 0
	fi

	if ! out=$(find "build/$i/$arch/$dir/" -mindepth 1 -maxdepth 1 -type f -name '*.rpm' -execdir gb-x-rpmaddsign "$GB_PACKAGE_SIGNER" '{}' '+'); then
		printf '%s\n' "$out"
		stamp_echo >&2 "$I $dir rpmsign FAILED"
		task_change_state_to_failing "[$arch]"
		exit 1
	fi
	mv $tmpdir/$dir-hash "build/$i/$arch"/$dir.signed
}

if [ -s "gears/$i/srpm" ]; then
	ln -f -- "gears/$i/$src" "build/$i/$arch/srpm/"
else
	rpmsign srpm
fi

gb-task-pesign-arch-i "$arch" "$i" || {
	stamp_echo >&2 "$I pesign FAILED"
	task_change_state_to_failing "[$arch]"
	exit 1
}
rpmsign rpms

save_build_try_iter
stamp_echo >&2 "$I build OK"
